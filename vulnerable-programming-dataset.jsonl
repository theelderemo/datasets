[
    {
      "id": 1,
      "language": "Python",
      "vulnerability": "SQL Injection",
      "description": "Concatenating user input directly into SQL query without parameterization.",
      "code": "import sqlite3\ndef get_user(username):\n    conn = sqlite3.connect('users.db')\n    query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n    cursor = conn.execute(query)\n    return cursor.fetchall()",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 2,
      "language": "C",
      "vulnerability": "Buffer Overflow",
      "description": "Unbounded string copy without size checking using strcpy.",
      "code": "#include <string.h>\nvoid copy_string(char *input) {\n    char buffer[16];\n    strcpy(buffer, input);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Buffer_Overflow",
        "CWE-120: https://cwe.mitre.org/data/definitions/120.html"
      ]
    },
    {
      "id": 3,
      "language": "JavaScript",
      "vulnerability": "Cross-Site Scripting (XSS)",
      "description": "Directly injecting user input into DOM without sanitization.",
      "code": "function displayComment(comment) {\n    document.getElementById('output').innerHTML = comment;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 4,
      "language": "PHP",
      "vulnerability": "File Inclusion",
      "description": "Dynamic file inclusion based on unsanitized user input.",
      "code": "<?php\n$page = $_GET['page'];\ninclude($page);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-98: https://cwe.mitre.org/data/definitions/98.html"
      ]
    },
    {
      "id": 5,
      "language": "Java",
      "vulnerability": "Insecure Deserialization",
      "description": "Deserializing untrusted user input without validation.",
      "code": "import java.io.*;\npublic class Deserialize {\n    public Object deserialize(byte[] data) throws Exception {\n        ByteArrayInputStream bis = new ByteArrayInputStream(data);\n        ObjectInputStream ois = new ObjectInputStream(bis);\n        return ois.readObject();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 6,
      "language": "Ruby",
      "vulnerability": "Command Injection",
      "description": "Executing unsanitized user input as a system command.",
      "code": "def execute_command(user_input)\n  system(\"ls #{user_input}\")\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 7,
      "language": "Go",
      "vulnerability": "Path Traversal",
      "description": "Allowing user input to access unauthorized files without validation.",
      "code": "package main\nimport \"os\"\nfunc readFile(path string) {\n    content, _ := os.ReadFile(path)\n    return content\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 8,
      "language": "TypeScript",
      "vulnerability": "Insecure Cryptography",
      "description": "Using weak cryptographic algorithm (MD5).",
      "code": "import { createHash } from 'crypto';\nfunction hashPassword(password: string): string {\n    return createHash('md5').update(password).digest('hex');\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-327: https://cwe.mitre.org/data/definitions/327.html"
      ]
    },
    {
      "id": 9,
      "language": "C++",
      "vulnerability": "Use After Free",
      "description": "Accessing memory after it has been freed.",
      "code": "#include <cstdlib>\nvoid use_after_free() {\n    int *ptr = new int(10);\n    delete ptr;\n    *ptr = 20;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Use_After_Free",
        "CWE-416: https://cwe.mitre.org/data/definitions/416.html"
      ]
    },
    {
      "id": 10,
      "language": "SQL",
      "vulnerability": "Hardcoded Credentials",
      "description": "Embedding sensitive credentials directly in the query.",
      "code": "SELECT * FROM users WHERE username = 'admin' AND password = 'secret123';",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 11,
      "language": "Python",
      "vulnerability": "Insecure File Handling",
      "description": "Reading files without validating paths, allowing unauthorized access.",
      "code": "def read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-73: https://cwe.mitre.org/data/definitions/73.html"
      ]
    },
    {
      "id": 12,
      "language": "JavaScript",
      "vulnerability": "CSRF",
      "description": "Making HTTP requests without CSRF token validation.",
      "code": "function updateUser(data) {\n    fetch('/update', { method: 'POST', body: JSON.stringify(data) });\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/csrf",
        "CWE-352: https://cwe.mitre.org/data/definitions/352.html"
      ]
    },
    {
      "id": 13,
      "language": "PHP",
      "vulnerability": "Session Fixation",
      "description": "Not regenerating session ID after login.",
      "code": "<?php\nsession_start();\n$_SESSION['user'] = $_GET['user'];\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Session_fixation",
        "CWE-384: https://cwe.mitre.org/data/definitions/384.html"
      ]
    },
    {
      "id": 14,
      "language": "Java",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding API keys directly in source code.",
      "code": "public class ApiClient {\n    private String apiKey = \"12345-abcde-secret\";\n    public void makeRequest() {}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 15,
      "language": "Ruby",
      "vulnerability": "Insecure Regular Expression",
      "description": "Using regex vulnerable to ReDoS (Regular Expression Denial of Service).",
      "code": "def validate_email(email)\n  email =~ /(a+)+b/\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 16,
      "language": "Go",
      "vulnerability": "SQL Injection",
      "description": "Building SQL queries with string concatenation.",
      "code": "package main\nimport \"database/sql\"\nfunc queryUser(db *sql.DB, name string) {\n    db.Query(\"SELECT * FROM users WHERE name = '\" + name + \"'\")\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 17,
      "language": "TypeScript",
      "vulnerability": "Prototype Pollution",
      "description": "Modifying object prototypes via user input.",
      "code": "function merge(target: any, source: any) {\n    for (const key in source) {\n        target[key] = source[key];\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Prototype_Pollution",
        "CWE-1321: https://cwe.mitre.org/data/definitions/1321.html"
      ]
    },
    {
      "id": 18,
      "language": "C++",
      "vulnerability": "Integer Overflow",
      "description": "Not checking for integer overflow in arithmetic operations.",
      "code": "#include <cstdint>\nint add(int a, int b) {\n    return a + b;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Integer_Overflow",
        "CWE-190: https://cwe.mitre.org/data/definitions/190.html"
      ]
    },
    {
      "id": 19,
      "language": "SQL",
      "vulnerability": "Insecure View",
      "description": "Creating views without proper access controls.",
      "code": "CREATE VIEW user_data AS SELECT * FROM users;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 20,
      "language": "Python",
      "vulnerability": "Insecure Deserialization",
      "description": "Using pickle to deserialize untrusted data.",
      "code": "import pickle\ndef load_data(data):\n    return pickle.loads(data)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 21,
      "language": "JavaScript",
      "vulnerability": "Insecure Randomness",
      "description": "Using Math.random() for cryptographic purposes.",
      "code": "function generateToken() {\n    return Math.random().toString(36).substring(2);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 22,
      "language": "PHP",
      "vulnerability": "Insecure File Upload",
      "description": "Allowing file uploads without validation of file type or content.",
      "code": "<?php\nmove_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 23,
      "language": "Java",
      "vulnerability": "SQL Injection",
      "description": "Using string concatenation in SQL queries.",
      "code": "import java.sql.*;\npublic class DbQuery {\n    public ResultSet query(Connection conn, String name) throws SQLException {\n        Statement stmt = conn.createStatement();\n        return stmt.executeQuery(\"SELECT * FROM users WHERE name = '\" + name + \"'\永恒",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 24,
      "language": "Ruby",
      "vulnerability": "XSS",
      "description": "Outputting user input without proper escaping.",
      "code": "<%= params[:input] %>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 25,
      "language": "Go",
      "vulnerability": "Insecure HTTP Headers",
      "description": "Missing security headers in HTTP response.",
      "code": "package main\nimport \"net/http\"\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-693: https://cwe.mitre.org/data/definitions/693.html"
      ]
    },
    {
      "id": 26,
      "language": "TypeScript",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding sensitive API keys in code.",
      "code": "const API_KEY: string = 'abc123-secret-key';\nasync function fetchData(): Promise<void> {\n    const response = await fetch(`https://api.example.com/data?key=${API_KEY}`);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 27,
      "language": "C++",
      "vulnerability": "Null Pointer Dereference",
      "description": "Dereferencing a pointer without checking for null.",
      "code": "#include <iostream>\nvoid process(int *ptr) {\n    std::cout << *ptr;\n}",
      "references": [
        "CWE-476: https://cwe.mitre.org/data/definitions/476.html"
      ]
    },
    {
      "id": 28,
      "language": "SQL",
      "vulnerability": "SQL Injection",
      "description": "Dynamic SQL query with unescaped input.",
      "code": "DECLARE @query NVARCHAR(100);\nSET @query = N'SELECT * FROM users WHERE id = ' + @input;\nEXEC sp_executesql @query;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 29,
      "language": "Python",
      "vulnerability": "Command Injection",
      "description": "Using unsanitized input in subprocess call.",
      "code": "import subprocess\ndef run_script(script):\n    subprocess.run(script, shell=True)",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 30,
      "language": "JavaScript",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure and HttpOnly flags.",
      "code": "document.cookie = 'session=12345; expires=Wed, 24 May 2025 12:00:00 UTC;';",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 31,
      "language": "PHP",
      "vulnerability": "Insecure Randomness",
      "description": "Using mt_rand() for cryptographic purposes.",
      "code": "<?php\n$token = mt_rand(1000, 9999);\necho $token;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 32,
      "language": "Java",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive information without sanitization.",
      "code": "import java.util.logging.Logger;\npublic class LogData {\n    private static final Logger LOGGER = Logger.getLogger(LogData.class.getName());\n    public void logCredentials(String password) {\n        LOGGER.info(\"Password: \" + password);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 33,
      "language": "Ruby",
      "vulnerability": "Insecure File Permissions",
      "description": "Writing files with overly permissive permissions.",
      "code": "File.write('data.txt', user_input, mode: 0777)",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 34,
      "language": "Go",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated TLS version.",
      "code": "package main\nimport \"crypto/tls\"\nfunc getTLSConfig() *tls.Config {\n    return &tls.Config{MinVersion: tls.VersionTLS10}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 35,
      "language": "TypeScript",
      "vulnerability": "SQL Injection",
      "description": "Concatenating user input in SQL query.",
      "code": "async function getUser(db: any, username: string): Promise<any> {\n    return db.query(`SELECT * FROM users WHERE username = '${username}'`);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 36,
      "language": "C++",
      "vulnerability": "Race Condition",
      "description": "Accessing shared resource without synchronization.",
      "code": "#include <thread>\nint counter = 0;\nvoid increment() {\n    for (int i = 0; i < 1000; i++) counter++;\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 37,
      "language": "SQL",
      "vulnerability": "Excessive Privileges",
      "description": "Granting excessive permissions to a user.",
      "code": "GRANT ALL PRIVILEGES ON database.* TO 'user'@'localhost';",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 38,
      "language": "Python",
      "vulnerability": "Insecure Regex",
      "description": "Using regex vulnerable to ReDoS.",
      "code": "import re\ndef check_input(input):\n    return re.match('(a+)+b', input)\n",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 39,
      "language": "JavaScript",
      "vulnerability": "Prototype Pollution",
      "description": "Allowing user input to modify object prototypes.",
      "code": "function setValue(obj, key, value) {\n    obj[key] = value;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Prototype_Pollution",
        "CWE-1321: https://cwe.mitre.org/data/definitions/1321.html"
      ]
    },
    {
      "id": 40,
      "language": "PHP",
      "vulnerability": "Insecure Serialization",
      "description": "Unserializing untrusted data.",
      "code": "<?php\n$data = unserialize($_POST['data']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 41,
      "language": "Java",
      "vulnerability": "Command Injection",
      "description": "Executing system commands with unsanitized input.",
      "code": "public class Exec {\n    public void run(String cmd) throws Exception {\n        Runtime.getRuntime().exec(cmd);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 42,
      "language": "Ruby",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure flag.",
      "code": "cookies[:session] = { value: '12345', expires: 1.day.from_now }",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 43,
      "language": "Go",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding sensitive credentials in code.",
      "code": "package main\nconst apiKey = \"secret-api-key\"\nfunc main() {\n    // Use apiKey\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 44,
      "language": "TypeScript",
      "vulnerability": "Insecure File Access",
      "description": "Accessing files without path validation.",
      "code": "import * as fs from 'fs';\nfunction readFile(path: string): string {\n    return fs.readFileSync(path, 'utf8');\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 45,
      "language": "C++",
      "vulnerability": "Buffer Overflow",
      "description": "Using gets() for unbounded input.",
      "code": "#include <cstdio>\nvoid read_input() {\n    char buffer[10];\n    gets(buffer);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Buffer_Overflow",
        "CWE-120: https://cwe.mitre.org/data/definitions/120.html"
      ]
    },
    {
      "id": 46,
      "language": "SQL",
      "vulnerability": "Insecure Temporary Table",
      "description": "Creating temporary tables without access controls.",
      "code": "CREATE TEMPORARY TABLE temp_data (id INT, data VARCHAR(100));",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 47,
      "language": "Python",
      "vulnerability": "Insecure HTTP Request",
      "description": "Making HTTP requests without certificate validation.",
      "code": "import requests\ndef fetch_data(url):\n    response = requests.get(url, verify=False)\n    return response.text",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-295: https://cwe.mitre.org/data/definitions/295.html"
      ]
    },
    {
      "id": 48,
      "language": "JavaScript",
      "vulnerability": "Eval Injection",
      "description": "Using eval() with user input.",
      "code": "function runCode(code) {\n    eval(code);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 49,
      "language": "PHP",
      "vulnerability": "XSS",
      "description": "Echoing user input without escaping.",
      "code": "<?php\necho $_GET['input'];\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 50,
      "language": "Java",
      "vulnerability": "Insecure Randomness",
      "description": "Using Random class for cryptographic purposes.",
      "code": "import java.util.Random;\npublic class TokenGenerator {\n    public int generateToken() {\n        return new Random().nextInt();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 51,
      "language": "Ruby",
      "vulnerability": "SQL Injection",
      "description": "Using string interpolation in SQL queries.",
      "code": "def find_user(name)\n  ActiveRecord::Base.connection.execute(\"SELECT * FROM users WHERE name = '#{name}'\")\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 52,
      "language": "Go",
      "vulnerability": "Insecure Randomness",
      "description": "Using math/rand for cryptographic purposes.",
      "code": "package main\nimport \"math/rand\"\nfunc generateKey() int {\n    return rand.Int()\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 53,
      "language": "TypeScript",
      "vulnerability": "CSRF",
      "description": "Making POST requests without CSRF tokens.",
      "code": "async function updateData(data: any): Promise<void> {\n    await fetch('/api/update', { method: 'POST', body: JSON.stringify(data) });\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/csrf",
        "CWE-352: https://cwe.mitre.org/data/definitions/352.html"
      ]
    },
    {
      "id": 54,
      "language": "C++",
      "vulnerability": "Memory Leak",
      "description": "Failing to free allocated memory.",
      "code": "#include <cstdlib>\nvoid allocate() {\n    int *ptr = new int[100];\n    // No delete\n}",
      "references": [
        "CWE-401: https://cwe.mitre.org/data/definitions/401.html"
      ]
    },
    {
      "id": 55,
      "language": "SQL",
      "vulnerability": "Insecure Backup",
      "description": "Storing database backups without encryption.",
      "code": "BACKUP DATABASE mydb TO DISK = 'mydb.bak';",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-312: https://cwe.mitre.org/data/definitions/312.html"
      ]
    },
    {
      "id": 56,
      "language": "Python",
      "vulnerability": "Insecure YAML Parsing",
      "description": "Using unsafe YAML loading.",
      "code": "import yaml\ndef parse_yaml(data):\n    return yaml.load(data, Loader=yaml.Loader)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 57,
      "language": "JavaScript",
      "vulnerability": "Insecure JSON Parsing",
      "description": "Parsing JSON without validation.",
      "code": "function parseData(data) {\n    return JSON.parse(data);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 58,
      "language": "PHP",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-controlled URL.",
      "code": "<?php\nheader('Location: ' . $_GET['url']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 59,
      "language": "Java",
      "vulnerability": "Insecure File Permissions",
      "description": "Writing files with permissive permissions.",
      "code": "import java.nio.file.*;\npublic class FileWriter {\n    public void writeFile(String path, String data) throws Exception {\n        Files.write(Paths.get(path), data.getBytes(), StandardOpenOption.CREATE);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 60,
      "language": "Ruby",
      "vulnerability": "Insecure Eval",
      "description": "Using eval with user input.",
      "code": "def run_code(code)\n  eval(code)\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 61,
      "language": "Go",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive data without sanitization.",
      "code": "package main\nimport \"log\"\nfunc logData(data string) {\n    log.Println(\"Data: \", data)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 62,
      "language": "TypeScript",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-supplied URL.",
      "code": "function redirect(url: string): void {\n    window.location.href = url;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 63,
      "language": "C++",
      "vulnerability": "Format String Vulnerability",
      "description": "Using user input in format string.",
      "code": "#include <cstdio>\nvoid print_data(char *input) {\n    printf(input);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Format_string_attack",
        "CWE-134: https://cwe.mitre.org/data/definitions/134.html"
      ]
    },
    {
      "id": 64,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Query",
      "description": "Using dynamic SQL with unescaped input.",
      "code": "SET @sql = CONCAT('SELECT ', @column, ' FROM users');\nPREPARE stmt FROM @sql;\nEXECUTE stmt;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 65,
      "language": "Python",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML without disabling external entities.",
      "code": "import xml.etree.ElementTree as ET\ndef parse_xml(data):\n    return ET.fromstring(data)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 66,
      "language": "JavaScript",
      "vulnerability": "Insecure Storage",
      "description": "Storing sensitive data in localStorage.",
      "code": "function saveToken(token) {\n    localStorage.setItem('token', token);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-922: https://cwe.mitre.org/data/definitions/922.html"
      ]
    },
    {
      "id": 67,
      "language": "PHP",
      "vulnerability": "Insecure Password Storage",
      "description": "Storing passwords in plain text.",
      "code": "<?php\n$password = $_POST['password'];\nmysql_query(\"INSERT INTO users (password) VALUES ('$password')\");\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-257: https://cwe.mitre.org/data/definitions/257.html"
      ]
    },
    {
      "id": 68,
      "language": "Java",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated SSL protocol.",
      "code": "import javax.net.ssl.*;\npublic class SSLConfig {\n    public SSLContext getContext() throws Exception {\n        return SSLContext.getInstance(\"SSLv3\");\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 69,
      "language": "Ruby",
      "vulnerability": "Insecure File Upload",
      "description": "Uploading files without type validation.",
      "code": "def upload_file\n  File.write(\"uploads/#{params[:file].original_filename}\", params[:file].read)\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 70,
      "language": "Go",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure flag.",
      "code": "package main\nimport \"net/http\"\nfunc setCookie(w http.ResponseWriter) {\n    http.SetCookie(w, &http.Cookie{Name: \"session\", Value: \"12345\"})\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 71,
      "language": "TypeScript",
      "vulnerability": "Insecure Randomness",
      "description": "Using Math.random() for security-sensitive operations.",
      "code": "function generateId(): string {\n    return Math.random().toString(36).substring(2);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 72,
      "language": "C++",
      "vulnerability": "Uninitialized Variable",
      "description": "Using a variable before initialization.",
      "code": "#include <iostream>\nvoid print_value() {\n    int x;\n    std::cout << x;\n}",
      "references": [
        "CWE-457: https://cwe.mitre.org/data/definitions/457.html"
      ]
    },
    {
      "id": 73,
      "language": "SQL",
      "vulnerability": "Insecure Trigger",
      "description": "Trigger executing unvalidated actions.",
      "code": "CREATE TRIGGER update_log AFTER INSERT ON users\nFOR EACH ROW\nBEGIN\n    INSERT INTO log (data) VALUES (NEW.data);\nEND;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 74,
      "language": "Python",
      "vulnerability": "Insecure Eval",
      "description": "Using exec() with user input.",
      "code": "def execute_code(code):\n    exec(code)",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 75,
      "language": "JavaScript",
      "vulnerability": "Insecure File Access",
      "description": "Accessing files without path validation.",
      "code": "const fs = require('fs');\nfunction readFile(path) {\n    return fs.readFileSync(path, 'utf8');\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 76,
      "language": "PHP",
      "vulnerability": "Insecure Session Handling",
      "description": "Using default session settings without security flags.",
      "code": "<?php\nsession_start();\n$_SESSION['user_id'] = 123;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 77,
      "language": "Java",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML with external entity processing enabled.",
      "code": "import javax.xml.parsers.*;\npublic class XmlParser {\n    public Document parse(String xml) throws Exception {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        return dbf.newDocumentBuilder().parse(new InputSource(new StringReader(xml)));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 78,
      "language": "Ruby",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-controlled URL.",
      "code": "def redirect\n  redirect_to params[:url]\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 79,
      "language": "Go",
      "vulnerability": "Insecure Deserialization",
      "description": "Deserializing untrusted data with gob.",
      "code": "package main\nimport \"encoding/gob\"\nfunc decode(data []byte) interface{} {\n    var result interface{}\n    gob.NewDecoder(bytes.NewReader(data)).Decode(&result)\n    return result\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 80,
      "language": "TypeScript",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive data without sanitization.",
      "code": "function logUser(user: { password: string }): void {\n    console.log(`User password: ${user.password}`);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 81,
      "language": "C++",
      "vulnerability": "Double Free",
      "description": "Freeing a pointer twice.",
      "code": "#include <cstdlib>\nvoid double_free() {\n    int *ptr = new int;\n    delete ptr;\n    delete ptr;\n}",
      "references": [
        "CWE-415: https://cwe.mitre.org/data/definitions/415.html"
      ]
    },
    {
      "id": 82,
      "language": "SQL",
      "vulnerability": "Insecure Function",
      "description": "Creating a function with excessive privileges.",
      "code": "CREATE FUNCTION dangerous_func() RETURNS TEXT AS $$ SELECT password FROM users; $$ LANGUAGE SQL;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 83,
      "language": "Python",
      "vulnerability": "Insecure Password Storage",
      "description": "Storing passwords in plain text.",
      "code": "def save_password(password):\n    with open('passwords.txt', 'a') as f:\n        f.write(password + '\\n')",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-257: https://cwe.mitre.org/data/definitions/257.html"
      ]
    },
    {
      "id": 84,
      "language": "JavaScript",
      "vulnerability": "Insecure CORS Configuration",
      "description": "Allowing all origins in CORS policy.",
      "code": "const express = require('express');\nconst app = express();\napp.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    next();\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-942: https://cwe.mitre.org/data/definitions/942.html"
      ]
    },
    {
      "id": 85,
      "language": "PHP",
      "vulnerability": "Insecure Database Connection",
      "description": "Using unencrypted database connection.",
      "code": "<?php\n$conn = new mysqli('localhost', 'user', 'pass', 'db');\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 86,
      "language": "Java",
      "vulnerability": "Insecure Session Management",
      "description": "Not invalidating session after logout.",
      "code": "public class SessionManager {\n    public void logout(HttpSession session) {\n        // No session.invalidate()\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-613: https://cwe.mitre.org/data/definitions/613.html"
      ]
    },
    {
      "id": 87,
      "language": "Ruby",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated TLS version.",
      "code": "require 'net/http'\nhttp = Net::HTTP.new('example.com', 443)\nhttp.use_ssl = true\nhttp.ssl_version = :TLSv1",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 88,
      "language": "Go",
      "vulnerability": "Insecure File Permissions",
      "description": "Creating files with permissive permissions.",
      "code": "package main\nimport \"os\"\nfunc createFile(name, data string) {\n    os.WriteFile(name, []byte(data), 0777)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 89,
      "language": "TypeScript",
      "vulnerability": "Insecure Session Storage",
      "description": "Storing session tokens in localStorage.",
      "code": "function storeSession(token: string): void {\n    localStorage.setItem('sessionToken', token);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-922: https://cwe.mitre.org/data/definitions/922.html"
      ]
    },
    {
      "id": 90,
      "language": "C++",
      "vulnerability": "Out-of-Bounds Access",
      "description": "Accessing array beyond its bounds.",
      "code": "#include <vector>\nvoid access_array() {\n    std::vector<int> vec(5);\n    vec[10] = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 91,
      "language": "SQL",
      "vulnerability": "Insecure Stored Procedure",
      "description": "Stored procedure with excessive privileges.",
      "code": "CREATE PROCEDURE unsafe_proc @input NVARCHAR(100)\nAS\nBEGIN\n    EXEC('SELECT * FROM users WHERE name = ''' + @input + '''')\nEND;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 92,
      "language": "Python",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-supplied URL.",
      "code": "from flask import redirect, request\ndef redirect_user():\n    return redirect(request.args.get('url'))",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 93,
      "language": "JavaScript",
      "vulnerability": "Insecure Regex",
      "description": "Using regex vulnerable to ReDoS.",
      "code": "function validate(str) {\n    return /(a+)+b/.test(str);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 94,
      "language": "PHP",
      "vulnerability": "Insecure Error Handling",
      "description": "Exposing sensitive information in error messages.",
      "code": "<?php\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 95,
      "language": "Java",
      "vulnerability": "Insecure File Upload",
      "description": "Uploading files without validation.",
      "code": "import java.io.*;\npublic class FileUpload {\n    public void saveFile(InputStream is, String path) throws IOException {\n        Files.copy(is, Paths.get(path));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 96,
      "language": "Ruby",
      "vulnerability": "Insecure Database Connection",
      "description": "Using unencrypted database connection.",
      "code": "ActiveRecord::Base.establish_connection(\n  adapter: 'mysql2',\n  host: 'localhost',\n  username: 'user',\n  password: 'pass',\n  database: 'db'\n)",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 97,
      "language": "Go",
      "vulnerability": "Insecure JSON Parsing",
      "description": "Parsing JSON without validation.",
      "code": "package main\nimport \"encoding/json\"\nfunc parseJSON(data []byte) interface{} {\n    var result interface{}\n    json.Unmarshal(data, &result)\n    return result\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 98,
      "language": "TypeScript",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML with external entity processing enabled.",
      "code": "import { DOMParser } from 'xmldom';\nfunction parseXML(xml: string): Document {\n    return new DOMParser().parseFromString(xml);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 99,
      "language": "C++",
      "vulnerability": "Insecure Temporary File",
      "description": "Creating temporary files in predictable locations.",
      "code": "#include <cstdio>\nvoid create_temp_file() {\n    FILE *f = fopen(\"/tmp/tempfile\", \"w\");\n    fclose(f);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-377: https://cwe.mitre.org/data/definitions/377.html"
      ]
    },
    {
      "id": 100,
      "language": "SQL",
      "vulnerability": "Insecure Role Assignment",
      "description": "Assigning overly permissive roles.",
      "code": "CREATE ROLE admin;\nGRANT ALL ON DATABASE mydb TO admin;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    }
    {
      "id":101,
      "language": "Python",
      "vulnerability": "SQL Injection",
      "description": "Concatenating user input directly into SQL query without parameterization.",
      "code": "import sqlite3\ndef get_user(username):\n    conn = sqlite3.connect('users.db')\n    query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n    cursor = conn.execute(query)\n    return cursor.fetchall()",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 102,
      "language": "C",
      "vulnerability": "Buffer Overflow",
      "description": "Unbounded string copy without size checking using strcpy.",
      "code": "#include <string.h>\nvoid copy_string(char *input) {\n    char buffer[16];\n    strcpy(buffer, input);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Buffer_Overflow",
        "CWE-120: https://cwe.mitre.org/data/definitions/120.html"
      ]
    },
    {
      "id": 103,
      "language": "JavaScript",
      "vulnerability": "Cross-Site Scripting (XSS)",
      "description": "Directly injecting user input into DOM without sanitization.",
      "code": "function displayComment(comment) {\n    document.getElementById('output').innerHTML = comment;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id":104,
      "language": "PHP",
      "vulnerability": "File Inclusion",
      "description": "Dynamic file inclusion based on unsanitized user input.",
      "code": "<?php\n$page = $_GET['page'];\ninclude($page);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-98: https://cwe.mitre.org/data/definitions/98.html"
      ]
    },
    {
      "id": 105,
      "language": "Java",
      "vulnerability": "Insecure Deserialization",
      "description": "Deserializing untrusted user input without validation.",
      "code": "import java.io.*;\npublic class Deserialize {\n    public Object deserialize(byte[] data) throws Exception {\n        ByteArrayInputStream bis = new ByteArrayInputStream(data);\n        ObjectInputStream ois = new ObjectInputStream(bis);\n        return ois.readObject();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 106,
      "language": "Ruby",
      "vulnerability": "Command Injection",
      "description": "Executing unsanitized user input as a system command.",
      "code": "def execute_command(user_input)\n  system(\"ls #{user_input}\")\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 107,
      "language": "Go",
      "vulnerability": "Path Traversal",
      "description": "Allowing user input to access unauthorized files without validation.",
      "code": "package main\nimport \"os\"\nfunc readFile(path string) {\n    content, _ := os.ReadFile(path)\n    return content\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 108,
      "language": "TypeScript",
      "vulnerability": "Insecure Cryptography",
      "description": "Using weak cryptographic algorithm (MD5).",
      "code": "import { createHash } from 'crypto';\nfunction hashPassword(password: string): string {\n    return createHash('md5').update(password).digest('hex');\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-327: https://cwe.mitre.org/data/definitions/327.html"
      ]
    },
    {
      "id": 109,
      "language": "C++",
      "vulnerability": "Use After Free",
      "description": "Accessing memory after it has been freed.",
      "code": "#include <cstdlib>\nvoid use_after_free() {\n    int *ptr = new int(10);\n    delete ptr;\n    *ptr = 20;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Use_After_Free",
        "CWE-416: https://cwe.mitre.org/data/definitions/416.html"
      ]
    },
    {
      "id": 110,
      "language": "SQL",
      "vulnerability": "Hardcoded Credentials",
      "description": "Embedding sensitive credentials directly in the query.",
      "code": "SELECT * FROM users WHERE username = 'admin' AND password = 'secret123';",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 111,
      "language": "Python",
      "vulnerability": "Insecure File Handling",
      "description": "Reading files without validating paths, allowing unauthorized access.",
      "code": "def read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-73: https://cwe.mitre.org/data/definitions/73.html"
      ]
    },
    {
      "id": 112,
      "language": "JavaScript",
      "vulnerability": "CSRF",
      "description": "Making HTTP requests without CSRF token validation.",
      "code": "function updateUser(data) {\n    fetch('/update', { method: 'POST', body: JSON.stringify(data) });\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/csrf",
        "CWE-352: https://cwe.mitre.org/data/definitions/352.html"
      ]
    },
    {
      "id": 113,
      "language": "PHP",
      "vulnerability": "Session Fixation",
      "description": "Not regenerating session ID after login.",
      "code": "<?php\nsession_start();\n$_SESSION['user'] = $_GET['user'];\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Session_fixation",
        "CWE-384: https://cwe.mitre.org/data/definitions/384.html"
      ]
    },
    {
      "id": 114,
      "language": "Java",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding API keys directly in source code.",
      "code": "public class ApiClient {\n    private String apiKey = \"12345-abcde-secret\";\n    public void makeRequest() {}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 115,
      "language": "Ruby",
      "vulnerability": "Insecure Regular Expression",
      "description": "Using regex vulnerable to ReDoS (Regular Expression Denial of Service).",
      "code": "def validate_email(email)\n  email =~ /(a+)+b/\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 116,
      "language": "Go",
      "vulnerability": "SQL Injection",
      "description": "Building SQL queries with string concatenation.",
      "code": "package main\nimport \"database/sql\"\nfunc queryUser(db *sql.DB, name string) {\n    db.Query(\"SELECT * FROM users WHERE name = '\" + name + \"'\")\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 117,
      "language": "TypeScript",
      "vulnerability": "Prototype Pollution",
      "description": "Modifying object prototypes via user input.",
      "code": "function merge(target: any, source: any) {\n    for (const key in source) {\n        target[key] = source[key];\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Prototype_Pollution",
        "CWE-1321: https://cwe.mitre.org/data/definitions/1321.html"
      ]
    },
    {
      "id": 118,
      "language": "C++",
      "vulnerability": "Integer Overflow",
      "description": "Not checking for integer overflow in arithmetic operations.",
      "code": "#include <cstdint>\nint add(int a, int b) {\n    return a + b;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Integer_Overflow",
        "CWE-190: https://cwe.mitre.org/data/definitions/190.html"
      ]
    },
    {
      "id": 119,
      "language": "SQL",
      "vulnerability": "Insecure View",
      "description": "Creating views without proper access controls.",
      "code": "CREATE VIEW user_data AS SELECT * FROM users;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 120,
      "language": "Python",
      "vulnerability": "Insecure Deserialization",
      "description": "Using pickle to deserialize untrusted data.",
      "code": "import pickle\ndef load_data(data):\n    return pickle.loads(data)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 121,
      "language": "JavaScript",
      "vulnerability": "Insecure Randomness",
      "description": "Using Math.random() for cryptographic purposes.",
      "code": "function generateToken() {\n    return Math.random().toString(36).substring(2);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 122,
      "language": "PHP",
      "vulnerability": "Insecure File Upload",
      "description": "Allowing file uploads without validation of file type or content.",
      "code": "<?php\nmove_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 123,
      "language": "Java",
      "vulnerability": "SQL Injection",
      "description": "Using string concatenation in SQL queries.",
      "code": "import java.sql.*;\npublic class DbQuery {\n    public ResultSet query(Connection conn, String name) throws SQLException {\n        Statement stmt = conn.createStatement();\n        return stmt.executeQuery(\"SELECT * FROM users WHERE name = '\" + name + \"'\");\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 124,
      "language": "Ruby",
      "vulnerability": "XSS",
      "description": "Outputting user input without proper escaping.",
      "code": "<%= params[:input] %>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 125,
      "language": "Go",
      "vulnerability": "Insecure HTTP Headers",
      "description": "Missing security headers in HTTP response.",
      "code": "package main\nimport \"net/http\"\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-693: https://cwe.mitre.org/data/definitions/693.html"
      ]
    },
    {
      "id": 126,
      "language": "TypeScript",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding sensitive API keys in code.",
      "code": "const API_KEY: string = 'abc123-secret-key';\nasync function fetchData(): Promise<void> {\n    const response = await fetch(`https://api.example.com/data?key=${API_KEY}`);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 127,
      "language": "C++",
      "vulnerability": "Null Pointer Dereference",
      "description": "Dereferencing a pointer without checking for null.",
      "code": "#include <iostream>\nvoid process(int *ptr) {\n    std::cout << *ptr;\n}",
      "references": [
        "CWE-476: https://cwe.mitre.org/data/definitions/476.html"
      ]
    },
    {
      "id": 128,
      "language": "SQL",
      "vulnerability": "SQL Injection",
      "description": "Dynamic SQL query with unescaped input.",
      "code": "DECLARE @query NVARCHAR(100);\nSET @query = N'SELECT * FROM users WHERE id = ' + @input;\nEXEC sp_executesql @query;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 129,
      "language": "Python",
      "vulnerability": "Command Injection",
      "description": "Using unsanitized input in subprocess call.",
      "code": "import subprocess\ndef run_script(script):\n    subprocess.run(script, shell=True)",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 130,
      "language": "JavaScript",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure and HttpOnly flags.",
      "code": "document.cookie = 'session=12345; expires=Wed, 24 May 2025 12:00:00 UTC;';",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 131,
      "language": "PHP",
      "vulnerability": "Insecure Randomness",
      "description": "Using mt_rand() for cryptographic purposes.",
      "code": "<?php\n$token = mt_rand(1000, 9999);\necho $token;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 132,
      "language": "Java",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive information without sanitization.",
      "code": "import java.util.logging.Logger;\npublic class LogData {\n    private static final Logger LOGGER = Logger.getLogger(LogData.class.getName());\n    public void logCredentials(String password) {\n        LOGGER.info(\"Password: \" + password);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 133,
      "language": "Ruby",
      "vulnerability": "Insecure File Permissions",
      "description": "Writing files with overly permissive permissions.",
      "code": "File.write('data.txt', user_input, mode: 0777)",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 134,
      "language": "Go",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated TLS version.",
      "code": "package main\nimport \"crypto/tls\"\nfunc getTLSConfig() *tls.Config {\n    return &tls.Config{MinVersion: tls.VersionTLS10}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 135,
      "language": "TypeScript",
      "vulnerability": "SQL Injection",
      "description": "Concatenating user input in SQL query.",
      "code": "async function getUser(db: any, username: string): Promise<any> {\n    return db.query(`SELECT * FROM users WHERE username = '${username}'`);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 136,
      "language": "C++",
      "vulnerability": "Race Condition",
      "description": "Accessing shared resource without synchronization.",
      "code": "#include <thread>\nint counter = 0;\nvoid increment() {\n    for (int i = 0; i < 1000; i++) counter++;\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 137,
      "language": "SQL",
      "vulnerability": "Excessive Privileges",
      "description": "Granting excessive permissions to a user.",
      "code": "GRANT ALL PRIVILEGES ON database.* TO 'user'@'localhost';",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 138,
      "language": "Python",
      "vulnerability": "Insecure Regex",
      "description": "Using regex vulnerable to ReDoS.",
      "code": "import re\ndef check_input(input):\n    return re.match('(a+)+b', input)\n",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 139,
      "language": "JavaScript",
      "vulnerability": "Prototype Pollution",
      "description": "Allowing user input to modify object prototypes.",
      "code": "function setValue(obj, key, value) {\n    obj[key] = value;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Prototype_Pollution",
        "CWE-1321: https://cwe.mitre.org/data/definitions/1321.html"
      ]
    },
    {
      "id": 140,
      "language": "PHP",
      "vulnerability": "Insecure Serialization",
      "description": "Unserializing untrusted data.",
      "code": "<?php\n$data = unserialize($_POST['data']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 141,
      "language": "Java",
      "vulnerability": "Command Injection",
      "description": "Executing system commands with unsanitized input.",
      "code": "public class Exec {\n    public void run(String cmd) throws Exception {\n        Runtime.getRuntime().exec(cmd);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Command_Injection",
        "CWE-77: https://cwe.mitre.org/data/definitions/77.html"
      ]
    },
    {
      "id": 142,
      "language": "Ruby",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure flag.",
      "code": "cookies[:session] = { value: '12345', expires: 1.day.from_now }",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 143,
      "language": "Go",
      "vulnerability": "Hardcoded Secrets",
      "description": "Embedding sensitive credentials in code.",
      "code": "package main\nconst apiKey = \"secret-api-key\"\nfunc main() {\n    // Use apiKey\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 144,
      "language": "TypeScript",
      "vulnerability": "Insecure File Access",
      "description": "Accessing files without path validation.",
      "code": "import * as fs from 'fs';\nfunction readFile(path: string): string {\n    return fs.readFileSync(path, 'utf8');\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 145,
      "language": "C++",
      "vulnerability": "Buffer Overflow",
      "description": "Using gets() for unbounded input.",
      "code": "#include <cstdio>\nvoid read_input() {\n    char buffer[10];\n    gets(buffer);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Buffer_Overflow",
        "CWE-120: https://cwe.mitre.org/data/definitions/120.html"
      ]
    },
    {
      "id": 146,
      "language": "SQL",
      "vulnerability": "Insecure Temporary Table",
      "description": "Creating temporary tables without access controls.",
      "code": "CREATE TEMPORARY TABLE temp_data (id INT, data VARCHAR(100));",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 147,
      "language": "Python",
      "vulnerability": "Insecure HTTP Request",
      "description": "Making HTTP requests without certificate validation.",
      "code": "import requests\ndef fetch_data(url):\n    response = requests.get(url, verify=False)\n    return response.text",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-295: https://cwe.mitre.org/data/definitions/295.html"
      ]
    },
    {
      "id": 148,
      "language": "JavaScript",
      "vulnerability": "Eval Injection",
      "description": "Using eval() with user input.",
      "code": "function runCode(code) {\n    eval(code);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 149,
      "language": "PHP",
      "vulnerability": "XSS",
      "description": "Echoing user input without escaping.",
      "code": "<?php\necho $_GET['input'];\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/xss/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 150,
      "language": "Java",
      "vulnerability": "Insecure Randomness",
      "description": "Using Random class for cryptographic purposes.",
      "code": "import java.util.Random;\npublic class TokenGenerator {\n    public int generateToken() {\n        return new Random().nextInt();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 151,
      "language": "Ruby",
      "vulnerability": "SQL Injection",
      "description": "Using string interpolation in SQL queries.",
      "code": "def find_user(name)\n  ActiveRecord::Base.connection.execute(\"SELECT * FROM users WHERE name = '#{name}'\")\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 152,
      "language": "Go",
      "vulnerability": "Insecure Randomness",
      "description": "Using math/rand for cryptographic purposes.",
      "code": "package main\nimport \"math/rand\"\nfunc generateKey() int {\n    return rand.Int()\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 153,
      "language": "TypeScript",
      "vulnerability": "CSRF",
      "description": "Making POST requests without CSRF tokens.",
      "code": "async function updateData(data: any): Promise<void> {\n    await fetch('/api/update', { method: 'POST', body: JSON.stringify(data) });\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/csrf",
        "CWE-352: https://cwe.mitre.org/data/definitions/352.html"
      ]
    },
    {
      "id": 154,
      "language": "C++",
      "vulnerability": "Memory Leak",
      "description": "Failing to free allocated memory.",
      "code": "#include <cstdlib>\nvoid allocate() {\n    int *ptr = new int[100];\n    // No delete\n}",
      "references": [
        "CWE-401: https://cwe.mitre.org/data/definitions/401.html"
      ]
    },
    {
      "id": 155,
      "language": "SQL",
      "vulnerability": "Insecure Backup",
      "description": "Storing database backups without encryption.",
      "code": "BACKUP DATABASE mydb TO DISK = 'mydb.bak';",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-312: https://cwe.mitre.org/data/definitions/312.html"
      ]
    },
    {
      "id": 156,
      "language": "Python",
      "vulnerability": "Insecure YAML Parsing",
      "description": "Using unsafe YAML loading.",
      "code": "import yaml\ndef parse_yaml(data):\n    return yaml.load(data, Loader=yaml.Loader)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 157,
      "language": "JavaScript",
      "vulnerability": "Insecure JSON Parsing",
      "description": "Parsing JSON without validation.",
      "code": "function parseData(data) {\n    return JSON.parse(data);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 158,
      "language": "PHP",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-controlled URL.",
      "code": "<?php\nheader('Location: ' . $_GET['url']);\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 159,
      "language": "Java",
      "vulnerability": "Insecure File Permissions",
      "description": "Writing files with permissive permissions.",
      "code": "import java.nio.file.*;\npublic class FileWriter {\n    public void writeFile(String path, String data) throws Exception {\n        Files.write(Paths.get(path), data.getBytes(), StandardOpenOption.CREATE);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 160,
      "language": "Ruby",
      "vulnerability": "Insecure Eval",
      "description": "Using eval with user input.",
      "code": "def run_code(code)\n  eval(code)\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 161,
      "language": "Go",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive data without sanitization.",
      "code": "package main\nimport \"log\"\nfunc logData(data string) {\n    log.Println(\"Data: \", data)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 162,
      "language": "TypeScript",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-supplied URL.",
      "code": "function redirect(url: string): void {\n    window.location.href = url;\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 163,
      "language": "C++",
      "vulnerability": "Format String Vulnerability",
      "description": "Using user input in format string.",
      "code": "#include <cstdio>\nvoid print_data(char *input) {\n    printf(input);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Format_string_attack",
        "CWE-134: https://cwe.mitre.org/data/definitions/134.html"
      ]
    },
    {
      "id": 164,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Query",
      "description": "Using dynamic SQL with unescaped input.",
      "code": "SET @sql = CONCAT('SELECT ', @column, ' FROM users');\nPREPARE stmt FROM @sql;\nEXECUTE stmt;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 165,
      "language": "Python",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML without disabling external entities.",
      "code": "import xml.etree.ElementTree as ET\ndef parse_xml(data):\n    return ET.fromstring(data)",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 166,
      "language": "JavaScript",
      "vulnerability": "Insecure Storage",
      "description": "Storing sensitive data in localStorage.",
      "code": "function saveToken(token) {\n    localStorage.setItem('token', token);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-922: https://cwe.mitre.org/data/definitions/922.html"
      ]
    },
    {
      "id": 167,
      "language": "PHP",
      "vulnerability": "Insecure Password Storage",
      "description": "Storing passwords in plain text.",
      "code": "<?php\n$password = $_POST['password'];\nmysql_query(\"INSERT INTO users (password) VALUES ('$password')\");\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-257: https://cwe.mitre.org/data/definitions/257.html"
      ]
    },
    {
      "id": 168,
      "language": "Java",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated SSL protocol.",
      "code": "import javax.net.ssl.*;\npublic class SSLConfig {\n    public SSLContext getContext() throws Exception {\n        return SSLContext.getInstance(\"SSLv3\");\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 169,
      "language": "Ruby",
      "vulnerability": "Insecure File Upload",
      "description": "Uploading files without type validation.",
      "code": "def upload_file\n  File.write(\"uploads/#{params[:file].original_filename}\", params[:file].read)\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 170,
      "language": "Go",
      "vulnerability": "Insecure Cookie Handling",
      "description": "Setting cookies without Secure flag.",
      "code": "package main\nimport \"net/http\"\nfunc setCookie(w http.ResponseWriter) {\n    http.SetCookie(w, &http.Cookie{Name: \"session\", Value: \"12345\"})\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-614: https://cwe.mitre.org/data/definitions/614.html"
      ]
    },
    {
      "id": 171,
      "language": "TypeScript",
      "vulnerability": "Insecure Randomness",
      "description": "Using Math.random() for security-sensitive operations.",
      "code": "function generateId(): string {\n    return Math.random().toString(36).substring(2);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-330: https://cwe.mitre.org/data/definitions/330.html"
      ]
    },
    {
      "id": 172,
      "language": "C++",
      "vulnerability": "Uninitialized Variable",
      "description": "Using a variable before initialization.",
      "code": "#include <iostream>\nvoid print_value() {\n    int x;\n    std::cout << x;\n}",
      "references": [
        "CWE-457: https://cwe.mitre.org/data/definitions/457.html"
      ]
    },
    {
      "id": 173,
      "language": "SQL",
      "vulnerability": "Insecure Trigger",
      "description": "Trigger executing unvalidated actions.",
      "code": "CREATE TRIGGER update_log AFTER INSERT ON users\nFOR EACH ROW\nBEGIN\n    INSERT INTO log (data) VALUES (NEW.data);\nEND;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 174,
      "language": "Python",
      "vulnerability": "Insecure Eval",
      "description": "Using exec() with user input.",
      "code": "def execute_code(code):\n    exec(code)",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Eval_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 175,
      "language": "JavaScript",
      "vulnerability": "Insecure File Access",
      "description": "Accessing files without path validation.",
      "code": "const fs = require('fs');\nfunction readFile(path) {\n    return fs.readFileSync(path, 'utf8');\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Path_Traversal",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 176,
      "language": "PHP",
      "vulnerability": "Insecure Session Handling",
      "description": "Using default session settings without security flags.",
      "code": "<?php\nsession_start();\n$_SESSION['user_id'] = 123;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 177,
      "language": "Java",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML with external entity processing enabled.",
      "code": "import javax.xml.parsers.*;\npublic class XmlParser {\n    public Document parse(String xml) throws Exception {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        return dbf.newDocumentBuilder().parse(new InputSource(new StringReader(xml)));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 178,
      "language": "Ruby",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-controlled URL.",
      "code": "def redirect\n  redirect_to params[:url]\nend",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 179,
      "language": "Go",
      "vulnerability": "Insecure Deserialization",
      "description": "Deserializing untrusted data with gob.",
      "code": "package main\nimport \"encoding/gob\"\nfunc decode(data []byte) interface{} {\n    var result interface{}\n    gob.NewDecoder(bytes.NewReader(data)).Decode(&result)\n    return result\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 180,
      "language": "TypeScript",
      "vulnerability": "Insecure Logging",
      "description": "Logging sensitive data without sanitization.",
      "code": "function logUser(user: { password: string }): void {\n    console.log(`User password: ${user.password}`);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-532: https://cwe.mitre.org/data/definitions/532.html"
      ]
    },
    {
      "id": 181,
      "language": "C++",
      "vulnerability": "Double Free",
      "description": "Freeing a pointer twice.",
      "code": "#include <cstdlib>\nvoid double_free() {\n    int *ptr = new int;\n    delete ptr;\n    delete ptr;\n}",
      "references": [
        "CWE-415: https://cwe.mitre.org/data/definitions/415.html"
      ]
    },
    {
      "id": 182,
      "language": "SQL",
      "vulnerability": "Insecure Function",
      "description": "Creating a function with excessive privileges.",
      "code": "CREATE FUNCTION dangerous_func() RETURNS TEXT AS $$ SELECT password FROM users; $$ LANGUAGE SQL;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 183,
      "language": "Python",
      "vulnerability": "Insecure Password Storage",
      "description": "Storing passwords in plain text.",
      "code": "def save_password(password):\n    with open('passwords.txt', 'a') as f:\n        f.write(password + '\\n')",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-257: https://cwe.mitre.org/data/definitions/257.html"
      ]
    },
    {
      "id": 184,
      "language": "JavaScript",
      "vulnerability": "Insecure CORS Configuration",
      "description": "Allowing all origins in CORS policy.",
      "code": "const express = require('express');\nconst app = express();\napp.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    next();\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-942: https://cwe.mitre.org/data/definitions/942.html"
      ]
    },
    {
      "id": 185,
      "language": "PHP",
      "vulnerability": "Insecure Database Connection",
      "description": "Using unencrypted database connection.",
      "code": "<?php\n$conn = new mysqli('localhost', 'user', 'pass', 'db');\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 186,
      "language": "Java",
      "vulnerability": "Insecure Session Management",
      "description": "Not invalidating session after logout.",
      "code": "public class SessionManager {\n    public void logout(HttpSession session) {\n        // No session.invalidate()\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-613: https://cwe.mitre.org/data/definitions/613.html"
      ]
    },
    {
      "id": 187,
      "language": "Ruby",
      "vulnerability": "Insecure TLS Configuration",
      "description": "Using outdated TLS version.",
      "code": "require 'net/http'\nhttp = Net::HTTP.new('example.com', 443)\nhttp.use_ssl = true\nhttp.ssl_version = :TLSv1",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 188,
      "language": "Go",
      "vulnerability": "Insecure File Permissions",
      "description": "Creating files with permissive permissions.",
      "code": "package main\nimport \"os\"\nfunc createFile(name, data string) {\n    os.WriteFile(name, []byte(data), 0777)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 189,
      "language": "TypeScript",
      "vulnerability": "Insecure Session Storage",
      "description": "Storing session tokens in localStorage.",
      "code": "function storeSession(token: string): void {\n    localStorage.setItem('sessionToken', token);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-922: https://cwe.mitre.org/data/definitions/922.html"
      ]
    },
    {
      "id": 190,
      "language": "C++",
      "vulnerability": "Out-of-Bounds Access",
      "description": "Accessing array beyond its bounds.",
      "code": "#include <vector>\nvoid access_array() {\n    std::vector<int> vec(5);\n    vec[10] = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 191,
      "language": "SQL",
      "vulnerability": "Insecure Stored Procedure",
      "description": "Stored procedure with excessive privileges.",
      "code": "CREATE PROCEDURE unsafe_proc @input NVARCHAR(100)\nAS\nBEGIN\n    EXEC('SELECT * FROM users WHERE name = ''' + @input + '''')\nEND;",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/SQL_Injection",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 192,
      "language": "Python",
      "vulnerability": "Insecure Redirect",
      "description": "Redirecting to user-supplied URL.",
      "code": "from flask import redirect, request\ndef redirect_user():\n    return redirect(request.args.get('url'))",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 193,
      "language": "JavaScript",
      "vulnerability": "Insecure Regex",
      "description": "Using regex vulnerable to ReDoS.",
      "code": "function validate(str) {\n    return /(a+)+b/.test(str);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 194,
      "language": "PHP",
      "vulnerability": "Insecure Error Handling",
      "description": "Exposing sensitive information in error messages.",
      "code": "<?php\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 195,
      "language": "Java",
      "vulnerability": "Insecure File Upload",
      "description": "Uploading files without validation.",
      "code": "import java.io.*;\npublic class FileUpload {\n    public void saveFile(InputStream is, String path) throws IOException {\n        Files.copy(is, Paths.get(path));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-434: https://cwe.mitre.org/data/definitions/434.html"
      ]
    },
    {
      "id": 196,
      "language": "Ruby",
      "vulnerability": "Insecure Database Connection",
      "description": "Using unencrypted database connection.",
      "code": "ActiveRecord::Base.establish_connection(\n  adapter: 'mysql2',\n  host: 'localhost',\n  username: 'user',\n  password: 'pass',\n  database: 'db'\n)",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 197,
      "language": "Go",
      "vulnerability": "Insecure JSON Parsing",
      "description": "Parsing JSON without validation.",
      "code": "package main\nimport \"encoding/json\"\nfunc parseJSON(data []byte) interface{} {\n    var result interface{}\n    json.Unmarshal(data, &result)\n    return result\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 198,
      "language": "TypeScript",
      "vulnerability": "Insecure XML Parsing",
      "description": "Parsing XML with external entity processing enabled.",
      "code": "import { DOMParser } from 'xmldom';\nfunction parseXML(xml: string): Document {\n    return new DOMParser().parseFromString(xml);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 199,
      "language": "C++",
      "vulnerability": "Insecure Temporary File",
      "description": "Creating temporary files in predictable locations.",
      "code": "#include <cstdio>\nvoid create_temp_file() {\n    FILE *f = fopen(\"/tmp/tempfile\", \"w\");\n    fclose(f);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-377: https://cwe.mitre.org/data/definitions/377.html"
      ]
    },
    {
      "id": 200,
      "language": "SQL",
      "vulnerability": "Insecure Role Assignment",
      "description": "Assigning overly permissive roles.",
      "code": "CREATE ROLE admin;\nGRANT ALL ON DATABASE mydb TO admin;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-732: https://cwe.mitre.org/data/definitions/732.html"
      ]
    },
    {
      "id": 201,
      "language": "Python",
      "vulnerability": "Insecure Third-Party Library",
      "description": "Using a deprecated and vulnerable version of a library (e.g., requests v2.19.0 with known CVE).",
      "code": "import requests\ndef fetch_data(url):\n    response = requests.get(url)  # Vulnerable version <2.20.0\n    return response.text",
      "references": [
        "OWASP: https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "CVE-2018-18074: https://nvd.nist.gov/vuln/detail/CVE-2018-18074"
      ]
    },
    {
      "id": 202,
      "language": "JavaScript",
      "vulnerability": "Logic Flaw in Authentication",
      "description": "Bypassing authentication by manipulating boolean checks.",
      "code": "function isAuthenticated(user) {\n    return user.isAdmin == true || user.role == 'admin';\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-840: https://cwe.mitre.org/data/definitions/840.html"
      ]
    },
    {
      "id": 203,
      "language": "Go",
      "vulnerability": "Environment Variable Exposure",
      "description": "Exposing sensitive environment variables in error messages.",
      "code": "package main\nimport \"os\"\nfunc getConfig() string {\n    key := os.Getenv(\"API_KEY\")\n    if key == \"\" {\n        panic(\"API_KEY not set: \" + key)\n    }\n    return key\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-497: https://cwe.mitre.org/data/definitions/497.html"
      ]
    },
    {
      "id": 204,
      "language": "PHP",
      "vulnerability": "Insecure API Endpoint",
      "description": "Exposing sensitive data through unprotected API endpoint.",
      "code": "<?php\necho json_encode(['api_key' => 'secret123']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 205,
      "language": "Java",
      "vulnerability": "Insecure Reflection",
      "description": "Using reflection with unvalidated input.",
      "code": "import java.lang.reflect.*;\npublic class Reflector {\n    public void invokeMethod(String methodName, Object obj) throws Exception {\n        Method method = obj.getClass().getMethod(methodName);\n        method.invoke(obj);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Reflected_Code_Injection",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 206,
      "language": "Ruby",
      "vulnerability": "Insecure Mass Assignment",
      "description": "Allowing user input to update protected attributes.",
      "code": "def update\n  @user.update_attributes(params[:user])\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-915: https://cwe.mitre.org/data/definitions/915.html"
      ]
    },
    {
      "id": 207,
      "language": "TypeScript",
      "vulnerability": "Insecure WebSocket Handling",
      "description": "Accepting unvalidated WebSocket messages.",
      "code": "const ws = new WebSocket('ws://example.com');\nws.onmessage = (event) => {\n    eval(event.data);\n};",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/WebSocket_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 208,
      "language": "C++",
      "vulnerability": "Insecure Signal Handling",
      "description": "Improper handling of signals leading to undefined behavior.",
      "code": "#include <signal.h>\nvoid handler(int sig) {\n    // Unsafe operations\n}\nvoid setup() {\n    signal(SIGINT, handler);\n}",
      "references": [
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 209,
      "language": "SQL",
      "vulnerability": "Insecure Data Masking",
      "description": "Failing to mask sensitive data in query results.",
      "code": "SELECT username, credit_card FROM users;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 210,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Import",
      "description": "Importing modules dynamically based on user input.",
      "code": "def load_module(name):\n    module = __import__(name)\n    return module",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Code_Injection",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 211,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Function",
      "description": "Creating functions dynamically from user input.",
      "code": "function createFunction(code) {\n    return new Function(code);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Code_Injection",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 212,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Variable",
      "description": "Using variable variables with unvalidated input.",
      "code": "<?php\n$var = $_GET['var'];\n$$var = 'value';\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Variable_and_Function_Injection",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 213,
      "language": "Java",
      "vulnerability": "Insecure Thread Safety",
      "description": "Using non-thread-safe collection in concurrent environment.",
      "code": "import java.util.ArrayList;\npublic class SharedData {\n    private ArrayList<String> list = new ArrayList<>();\n    public void add(String item) {\n        list.add(item);\n    }\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 214,
      "language": "Ruby",
      "vulnerability": "Insecure Tempfile Creation",
      "description": "Creating temporary files without secure naming.",
      "code": "require 'tempfile'\nfile = Tempfile.new('myapp')\nfile.write('data')",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-377: https://cwe.mitre.org/data/definitions/377.html"
      ]
    },
    {
      "id": 215,
      "language": "Go",
      "vulnerability": "Insecure Mutex Usage",
      "description": "Improper mutex locking leading to race conditions.",
      "code": "package main\nimport \"sync\"\nvar counter int\nvar mu sync.Mutex\nfunc increment() {\n    counter++\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 216,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Import",
      "description": "Dynamically importing modules based on user input.",
      "code": "async function loadModule(name: string): Promise<any> {\n    return import(name);\n}",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Code_Injection",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 217,
      "language": "C++",
      "vulnerability": "Insecure Exception Handling",
      "description": "Catching all exceptions without specific handling.",
      "code": "#include <exception>\nvoid process() {\n    try {\n        // Code\n    } catch (...) {\n        // Ignore all exceptions\n    }\n}",
      "references": [
        "CWE-396: https://cwe.mitre.org/data/definitions/396.html"
      ]
    },
    {
      "id": 218,
      "language": "SQL",
      "vulnerability": "Insecure Audit Logging",
      "description": "Failing to log sensitive operations.",
      "code": "INSERT INTO users (username) VALUES ('newuser');",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 219,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Attribute",
      "description": "Setting object attributes dynamically from user input.",
      "code": "def set_attribute(obj, name, value):\n    setattr(obj, name, value)",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Code_Injection",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 220,
      "language": "JavaScript",
      "vulnerability": "Insecure Worker Thread",
      "description": "Passing unvalidated data to Web Worker.",
      "code": "const worker = new Worker('worker.js');\nworker.postMessage(userInput);",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Code_Injection",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 221,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Include",
      "description": "Including files dynamically based on user input.",
      "code": "<?php\nrequire $_GET['module'] . '.php';\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
        "CWE-98: https://cwe.mitre.org/data/definitions/98.html"
      ]
    },
    {
      "id": 222,
      "language": "Java",
      "vulnerability": "Insecure Resource Access",
      "description": "Accessing resources without proper authorization checks.",
      "code": "public class ResourceAccess {\n    public String getResource(String id) {\n        return loadResource(id);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 223,
      "language": "Ruby",
      "vulnerability": "Insecure Session Timeout",
      "description": "Not setting session expiration.",
      "code": "session[:user_id] = user.id",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-613: https://cwe.mitre.org/data/definitions/613.html"
      ]
    },
    {
      "id": 224,
      "language": "Go",
      "vulnerability": "Insecure Error Exposure",
      "description": "Returning detailed error messages to clients.",
      "code": "package main\nimport \"net/http\"\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    _, err := os.Open(\"file.txt\")\n    if err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 225,
      "language": "TypeScript",
      "vulnerability": "Insecure API Key Exposure",
      "description": "Exposing API keys in client-side code.",
      "code": "const API_KEY = 'abc123';\nfetch(`https://api.example.com?key=${API_KEY}`);",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 226,
      "language": "C++",
      "vulnerability": "Insecure Shared Memory",
      "description": "Using shared memory without access controls.",
      "code": "#include <sys/shm.h>\nvoid* create_shared_memory() {\n    int shmid = shmget(IPC_PRIVATE, 1024, 0666);\n    return shmat(shmid, NULL, 0);\n}",
      "references": [
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 227,
      "language": "SQL",
      "vulnerability": "Insecure Column Encryption",
      "description": "Storing sensitive data without encryption.",
      "code": "ALTER TABLE users ADD credit_card VARCHAR(16);",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 228,
      "language": "Python",
      "vulnerability": "Insecure Threading",
      "description": "Accessing shared resources without locks.",
      "code": "counter = 0\ndef increment():\n    global counter\n    counter += 1",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },   
    {
      "id": 229,
      "language": "Python",
      "vulnerability": "Insecure Interprocess Communication",
      "description": "Using unencrypted pipes for interprocess communication, exposing sensitive data.",
      "code": "import subprocess\ndef communicate(data):\n    proc = subprocess.Popen(['process'], stdin=subprocess.PIPE)\n    proc.communicate(input=data.encode())",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-319: https://cwe.mitre.org/data/definitions/319.html"
      ]
    },
    {
      "id": 230,
      "language": "JavaScript",
      "vulnerability": "Misconfigured Rate Limiting",
      "description": "Failing to enforce rate limits on API endpoints, allowing brute force attacks.",
      "code": "const express = require('express');\nconst app = express();\napp.post('/login', (req, res) => {\n    authenticate(req.body);\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-770: https://cwe.mitre.org/data/definitions/770.html"
      ]
    },
    {
      "id": 231,
      "language": "Go",
      "vulnerability": "Insecure Dependency Pinning",
      "description": "Using unpinned dependencies in go.mod, risking supply chain attacks.",
      "code": "module example\ngo 1.18\nrequire github.com/vulnerable/package v0.0.0",
      "references": [
        "OWASP: https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 232,
      "language": "PHP",
      "vulnerability": "Logic Flaw in Password Reset",
      "description": "Allowing password reset without verifying user identity.",
      "code": "<?php\nif (isset($_POST['email'])) {\n    resetPassword($_POST['email']);\n}\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-840: https://cwe.mitre.org/data/definitions/840.html"
      ]
    },
    {
      "id": 233,
      "language": "Java",
      "vulnerability": "Insecure JNI Usage",
      "description": "Calling native code without proper validation, risking memory corruption.",
      "code": "public class NativeCall {\n    static { System.loadLibrary('native'); }\n    public native void process(String input);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "CWE-111: https://cwe.mitre.org/data/definitions/111.html"
      ]
    },
    {
      "id": 234,
      "language": "Ruby",
      "vulnerability": "Insecure Queue Processing",
      "description": "Processing unvalidated messages from a queue, allowing code execution.",
      "code": "require 'sidekiq'\nclass Worker\n  include Sidekiq::Worker\n  def perform(message)\n    eval(message)\n  end\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 235,
      "language": "TypeScript",
      "vulnerability": "Insecure Event Listener",
      "description": "Adding event listeners that process untrusted data.",
      "code": "window.addEventListener('message', (event) => {\n    eval(event.data);\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 236,
      "language": "C++",
      "vulnerability": "Insecure Shared Library Loading",
      "description": "Loading libraries from untrusted paths, risking DLL injection.",
      "code": "#include <dlfcn.h>\nvoid load_library(const char* path) {\n    void* handle = dlopen(path, RTLD_LAZY);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "CWE-426: https://cwe.mitre.org/data/definitions/426.html"
      ]
    },
    {
      "id": 237,
      "language": "SQL",
      "vulnerability": "Insecure Data Retention",
      "description": "Retaining sensitive data without expiration policies.",
      "code": "INSERT INTO logs (user_id, data) VALUES (123, 'sensitive data');",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-285: https://cwe.mitre.org/data/definitions/285.html"
      ]
    },
    {
      "id": 238,
      "language": "Python",
      "vulnerability": "Insecure Monkey Patching",
      "description": "Dynamically modifying runtime behavior with untrusted code.",
      "code": "import types\ndef patch_function(obj, name, code):\n    setattr(obj, name, types.MethodType(code, obj))",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 239,
      "language": "JavaScript",
      "vulnerability": "Insecure Service Worker",
      "description": "Registering service worker with unvalidated scope.",
      "code": "navigator.serviceWorker.register(userInput + '/sw.js');",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 240,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Class Loading",
      "description": "Instantiating classes dynamically based on user input.",
      "code": "<?php\n$class = $_GET['class'];\n$obj = new $class();\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 241,
      "language": "Java",
      "vulnerability": "Insecure Object Cloning",
      "description": "Cloning objects without validating contents.",
      "code": "public class Cloner implements Cloneable {\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "CWE-494: https://cwe.mitre.org/data/definitions/494.html"
      ]
    },
    {
      "id": 242,
      "language": "Ruby",
      "vulnerability": "Insecure YAML Serialization",
      "description": "Serializing objects to YAML without restricting types.",
      "code": "require 'yaml'\ndef serialize(obj)\n  YAML.dump(obj)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 243,
      "language": "Go",
      "vulnerability": "Insecure HTTP Method Handling",
      "description": "Allowing unintended HTTP methods on sensitive endpoints.",
      "code": "package main\nimport \"net/http\"\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"OK\"))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-285: https://cwe.mitre.org/data/definitions/285.html"
      ]
    },
    {
      "id": 244,
      "language": "TypeScript",
      "vulnerability": "Insecure Message Passing",
      "description": "Processing unvalidated messages in postMessage.",
      "code": "window.addEventListener('message', (event) => {\n    document.write(event.data);\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 245,
      "language": "C++",
      "vulnerability": "Insecure Memory Mapping",
      "description": "Using mmap with unprotected memory regions.",
      "code": "#include <sys/mman.h>\nvoid* map_memory(size_t size) {\n    return mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, -1, 0);\n}",
      "references": [
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 246,
      "language": "SQL",
      "vulnerability": "Insecure Schema Modification",
      "description": "Allowing unvalidated schema changes.",
      "code": "ALTER TABLE users ADD COLUMN data VARCHAR(100);",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-285: https://cwe.mitre.org/data/definitions/285.html"
      ]
    },
    {
      "id": 247,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Code Execution",
      "description": "Executing dynamically generated code from untrusted sources.",
      "code": "def run_code(code):\n    compile(code, '<string>', 'exec')\n    exec(code)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 248,
      "language": "JavaScript",
      "vulnerability": "Insecure WebRTC Configuration",
      "description": "Using WebRTC without proper ICE server validation.",
      "code": "const pc = new RTCPeerConnection({ iceServers: [{ urls: userInput }] });",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-295: https://cwe.mitre.org/data/definitions/295.html"
      ]
    },
    {
      "id": 249,
      "language": "PHP",
      "vulnerability": "Insecure Regex Evaluation",
      "description": "Using user input in regex patterns, risking ReDoS.",
      "code": "<?php\npreg_match($_GET['pattern'], 'data');\n?>",
      "references": [
        "OWASP: https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 250,
      "language": "Java",
      "vulnerability": "Insecure Class Loading",
      "description": "Loading classes dynamically from untrusted sources.",
      "code": "public class Loader {\n    public Class<?> load(String name) throws Exception {\n        return Class.forName(name);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 251,
      "language": "Ruby",
      "vulnerability": "Insecure Session Storage",
      "description": "Storing sessions in unencrypted cookies.",
      "code": "cookies[:session] = Base64.encode64(user.to_json)",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-311: https://cwe.mitre.org/data/definitions/311.html"
      ]
    },
    {
      "id": 252,
      "language": "Go",
      "vulnerability": "Insecure Context Handling",
      "description": "Failing to cancel long-running operations with context.",
      "code": "package main\nimport \"context\"\nfunc process(ctx context.Context) {\n    // No ctx.Done() check\n    time.Sleep(time.Hour)\n}",
      "references": [
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 253,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Template",
      "description": "Using user input in template literals without sanitization.",
      "code": "function render(data: string): string {\n    return `<div>${data}</div>`;\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 254,
      "language": "C++",
      "vulnerability": "Insecure Atomic Operation",
      "description": "Using non-atomic operations in concurrent code.",
      "code": "#include <thread>\nint counter = 0;\nvoid increment() {\n    counter++;\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 255,
      "language": "SQL",
      "vulnerability": "Insecure Transaction Handling",
      "description": "Failing to rollback transactions on error.",
      "code": "BEGIN TRANSACTION;\nINSERT INTO users (name) VALUES ('test');\n-- No ROLLBACK on error",
      "references": [
        "OWASP: https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "CWE-390: https://cwe.mitre.org/data/definitions/390.html"
      ]
    },
    {
      "id": 256,
      "language": "Python",
      "vulnerability": "Insecure Signal Handling",
      "description": "Handling signals without validating context.",
      "code": "import signal\ndef handler(sig, frame):\n    print('Signal received')\nsignal.signal(signal.SIGINT, handler)",
      "references": [
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 257,
      "language": "JavaScript",
      "vulnerability": "Insecure Clipboard Access",
      "description": "Reading clipboard data without user consent.",
      "code": "navigator.clipboard.readText().then(data => console.log(data));",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 258,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Function Call",
      "description": "Calling functions dynamically based on user input.",
      "code": "<?php\n$func = $_GET['func'];\n$func();\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 259,
      "language": "Java",
      "vulnerability": "Insecure Resource Locking",
      "description": "Using locks without proper timeout, risking deadlocks.",
      "code": "import java.util.concurrent.locks.*;\npublic class Locker {\n    private ReentrantLock lock = new ReentrantLock();\n    public void process() {\n        lock.lock();\n        // No timeout\n    }\n}",
      "references": [
        "CWE-833: https://cwe.mitre.org/data/definitions/833.html"
      ]
    },
    {
      "id": 260,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Routing",
      "description": "Defining routes based on user input.",
      "code": "get \"/#{params[:path]}\" do\n  'OK'\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 261,
      "language": "Go",
      "vulnerability": "Insecure File Descriptor Handling",
      "description": "Using file descriptors without validation.",
      "code": "package main\nimport \"os\"\nfunc read_fd(fd int) {\n    f := os.NewFile(uintptr(fd), \"file\")\n    f.Read(make([]byte, 1024))\n}",
      "references": [
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 262,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Property Access",
      "description": "Accessing object properties dynamically with user input.",
      "code": "function getProperty(obj: any, key: string): any {\n    return obj[key];\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 263,
      "language": "C++",
      "vulnerability": "Insecure Pointer Arithmetic",
      "description": "Performing pointer arithmetic without bounds checking.",
      "code": "#include <iostream>\nvoid process(int* ptr, int offset) {\n    *(ptr + offset) = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 264,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Table Name",
      "description": "Using user input in table names for queries.",
      "code": "SELECT * FROM @table_name WHERE id = 1;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 265,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Module Loading",
      "description": "Loading modules dynamically based on user input.",
      "code": "import importlib\ndef load_module(name):\n    return importlib.import_module(name)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 266,
      "language": "JavaScript",
      "vulnerability": "Insecure Geolocation Access",
      "description": "Accessing geolocation without user consent.",
      "code": "navigator.geolocation.getCurrentPosition(pos => console.log(pos));",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 267,
      "language": "PHP",
      "vulnerability": "Insecure Session Regeneration",
      "description": "Failing to regenerate session ID on privilege escalation.",
      "code": "<?php\nsession_start();\n$_SESSION['role'] = 'admin';\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-384: https://cwe.mitre.org/data/definitions/384.html"
      ]
    },
    {
      "id": 268,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Proxy",
      "description": "Creating dynamic proxies with unvalidated handlers.",
      "code": "import java.lang.reflect.*;\npublic class ProxyCreator {\n    public Object createProxy(Object target, InvocationHandler handler) {\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 269,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Method Call",
      "description": "Calling methods dynamically based on user input.",
      "code": "def call_method(obj, method)\n  obj.send(method)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 270,
      "language": "Go",
      "vulnerability": "Insecure Signal Handling",
      "description": "Handling OS signals without proper validation.",
      "code": "package main\nimport \"os/signal\"\nfunc setup() {\n    c := make(chan os.Signal, 1)\n    signal.Notify(c)\n    <-c\n}",
      "references": [
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 271,
      "language": "TypeScript",
      "vulnerability": "Insecure Dependency Injection",
      "description": "Injecting dependencies without validation.",
      "code": "function injectDependency(name: string): any {\n    return require(name);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 272,
      "language": "C++",
      "vulnerability": "Insecure Thread Termination",
      "description": "Terminating threads without cleanup.",
      "code": "#include <thread>\nvoid run() {\n    std::thread t([](){});\n    // No join or detach\n}",
      "references": [
        "CWE-404: https://cwe.mitre.org/data/definitions/404.html"
      ]
    },
    {
      "id": 273,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Column Name",
      "description": "Using user input in column names for queries.",
      "code": "SELECT @column_name FROM users;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 274,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Class Creation",
      "description": "Creating classes dynamically with untrusted input.",
      "code": "def create_class(name):\n    return type(name, (), {})\n",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 275,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Import",
      "description": "Importing modules dynamically with user input.",
      "code": "async function loadModule(name) {\n    return import(name);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 276,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic SQL Function",
      "description": "Calling SQL functions dynamically with user input.",
      "code": "<?php\nmysql_query('CALL ' . $_GET['func'] . '()');\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 277,
      "language": "Java",
      "vulnerability": "Insecure Object Serialization",
      "description": "Serializing objects without restricting types.",
      "code": "import java.io.*;\npublic class Serializer {\n    public byte[] serialize(Object obj) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(obj);\n        return baos.toByteArray();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "CWE-502: https://cwe.mitre.org/data/definitions/502.html"
      ]
    },
    {
      "id": 278,
      "language": "Ruby",
      "vulnerability": "Insecure API Token Exposure",
      "description": "Exposing API tokens in client-side code.",
      "code": "<script>\n  const token = '<%= api_token %>';\n</script>",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-798: https://cwe.mitre.org/data/definitions/798.html"
      ]
    },
    {
      "id": 279,
      "language": "Go",
      "vulnerability": "Insecure Goroutine Safety",
      "description": "Accessing shared resources without synchronization.",
      "code": "package main\nvar counter int\nfunc increment() {\n    counter++\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 280,
      "language": "TypeScript",
      "vulnerability": "Insecure Worker Script",
      "description": "Loading worker scripts from untrusted sources.",
      "code": "const worker = new Worker(userInput);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 281,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Memory Allocation",
      "description": "Allocating memory without checking size constraints.",
      "code": "#include <cstdlib>\nvoid allocate(size_t size) {\n    char* buf = (char*)malloc(size);\n    strcpy(buf, \"data\");\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 282,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Index Creation",
      "description": "Creating indexes with user-controlled names.",
      "code": "CREATE INDEX @index_name ON users(id);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 283,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Object Creation",
      "description": "Creating objects dynamically from untrusted input.",
      "code": "def create_object(class_name):\n    return globals()[class_name]()",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 284,
      "language": "JavaScript",
      "vulnerability": "Insecure Notification API",
      "description": "Using Notification API without permission checks.",
      "code": "new Notification(userInput);",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 285,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Property Setting",
      "description": "Setting object properties dynamically with user input.",
      "code": "<?php\nclass User {\n    public function set($key, $value) {\n        $this->$key = $value;\n    }\n}\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 286,
      "language": "Java",
      "vulnerability": "Insecure Security Manager",
      "description": "Disabling security manager, bypassing checks.",
      "code": "public class App {\n    public void disableSecurity() {\n        System.setSecurityManager(null);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 287,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Constant",
      "description": "Defining constants dynamically with user input.",
      "code": "def set_constant(name, value)\n  Object.const_set(name, value)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 288,
      "language": "Go",
      "vulnerability": "Insecure Timeout Configuration",
      "description": "Setting infinite timeouts for HTTP clients.",
      "code": "package main\nimport \"net/http\"\nfunc client() *http.Client {\n    return &http.Client{Timeout: 0}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 289,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Eval",
      "description": "Using eval with dynamic user input.",
      "code": "function runCode(code: string): void {\n    eval(code);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 290,
      "language": "C++",
      "vulnerability": "Insecure Resource Cleanup",
      "description": "Failing to release resources properly.",
      "code": "#include <fstream>\nvoid process() {\n    std::ofstream file(\"data.txt\");\n    // No file.close()\n}",
      "references": [
        "CWE-404: https://cwe.mitre.org/data/definitions/404.html"
      ]
    },
    {
      "id": 291,
      "language": "SQL",
      "vulnerability": "Insecure View Definition",
      "description": "Creating views exposing sensitive columns.",
      "code": "CREATE VIEW user_view AS SELECT id, password FROM users;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 292,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Function Definition",
      "description": "Defining functions dynamically with user input.",
      "code": "def create_function(name, code):\n    globals()[name] = lambda x: eval(code)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 293,
      "language": "JavaScript",
      "vulnerability": "Insecure Broadcast Channel",
      "description": "Using BroadcastChannel without validating messages.",
      "code": "const bc = new BroadcastChannel('channel');\nbc.onmessage = (event) => eval(event.data);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 294,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Table Creation",
      "description": "Creating tables dynamically with user input.",
      "code": "<?php\nmysql_query('CREATE TABLE ' . $_GET['table'] . ' (id INT)');\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 295,
      "language": "Java",
      "vulnerability": "Insecure Thread Pool Configuration",
      "description": "Using unbounded thread pool, risking resource exhaustion.",
      "code": "import java.util.concurrent.*;\npublic class ThreadPool {\n    public ExecutorService createPool() {\n        return Executors.newCachedThreadPool();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 296,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Template Rendering",
      "description": "Rendering templates with untrusted input.",
      "code": "ERB.new(params[:template]).result",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 297,
      "language": "Go",
      "vulnerability": "Insecure Panic Recovery",
      "description": "Recovering from panics without proper validation.",
      "code": "package main\nfunc process() {\n    defer func() { recover() }()\n    panic(\"error\")\n}",
      "references": [
        "CWE-696: https://cwe.mitre.org/data/definitions/696.html"
      ]
    },
    {
      "id": 298,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic URL Construction",
      "description": "Constructing URLs with unvalidated user input.",
      "code": "function navigate(url: string): void {\n    window.location.href = url;\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 299,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Cast",
      "description": "Using dynamic_cast without type safety checks.",
      "code": "#include <typeinfo>\nclass Base {};\nclass Derived : public Base {};\nvoid cast(Base* b) {\n    Derived* d = dynamic_cast<Derived*>(b);\n    d->method();\n}",
      "references": [
        "CWE-704: https://cwe.mitre.org/data/definitions/704.html"
      ]
    },
    {
      "id": 300,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Constraint",
      "description": "Creating constraints with user-controlled names.",
      "code": "ALTER TABLE users ADD CONSTRAINT @constraint_name UNIQUE (email);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 301,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Attribute Deletion",
      "description": "Deleting object attributes dynamically with user input.",
      "code": "def delete_attribute(obj, name):\n    delattr(obj, name)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 302,
      "language": "JavaScript",
      "vulnerability": "Insecure Shared Array Buffer",
      "description": "Using SharedArrayBuffer without security headers.",
      "code": "const sab = new SharedArrayBuffer(1024);",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-693: https://cwe.mitre.org/data/definitions/693.html"
      ]
    },
    {
      "id": 303,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Config Setting",
      "description": "Setting PHP configuration dynamically with user input.",
      "code": "<?php\nini_set($_GET['setting'], $_GET['value']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 304,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Annotation",
      "description": "Applying annotations dynamically with user input.",
      "code": "import java.lang.annotation.*;\npublic class Annotator {\n    public void apply(String annotation) throws Exception {\n        Class.forName(annotation).getAnnotation(Annotation.class);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 305,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Module Inclusion",
      "description": "Including modules dynamically with user input.",
      "code": "def include_module(name)\n  include Object.const_get(name)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 306,
      "language": "Go",
      "vulnerability": "Insecure Channel Communication",
      "description": "Using unbuffered channels without proper synchronization.",
      "code": "package main\nfunc process(ch chan int) {\n    ch <- 42\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 307,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic CSS",
      "description": "Applying CSS styles dynamically with user input.",
      "code": "function applyStyle(element: HTMLElement, css: string): void {\n    element.style.cssText = css;\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 308,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Type Creation",
      "description": "Creating types dynamically without validation.",
      "code": "#include <typeinfo>\nvoid create_type(const char* name) {\n    typeid(name).name();\n}",
      "references": [
        "CWE-704: https://cwe.mitre.org/data/definitions/704.html"
      ]
    },
    {
      "id": 309,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Trigger",
      "description": "Creating triggers with user-controlled logic.",
      "code": "CREATE TRIGGER @trigger_name AFTER INSERT ON users FOR EACH ROW BEGIN INSERT INTO logs(data) VALUES (@input); END;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 310,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Method Binding",
      "description": "Binding methods dynamically with untrusted input.",
      "code": "def bind_method(obj, name, func):\n    setattr(obj, name, func)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 311,
      "language": "JavaScript",
      "vulnerability": "Insecure WebAssembly",
      "description": "Loading WebAssembly modules from untrusted sources.",
      "code": "WebAssembly.instantiateStreaming(fetch(userInput));",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 312,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Header Injection",
      "description": "Setting HTTP headers with user input.",
      "code": "<?php\nheader($_GET['header']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-113: https://cwe.mitre.org/data/definitions/113.html"
      ]
    },
    {
      "id": 313,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Permissions",
      "description": "Granting permissions dynamically without validation.",
      "code": "import java.security.*;\npublic class Permissions {\n    public void grant(String perm) {\n        Permissions p = new Permissions();\n        p.add(new Permission(perm) {});\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 314,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Logger",
      "description": "Configuring logger with user-controlled settings.",
      "code": "require 'logger'\ndef set_logger(level)\n  Logger.new(STDOUT).level = level\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 315,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Template",
      "description": "Rendering templates with untrusted input.",
      "code": "package main\nimport \"html/template\"\nfunc render(tmpl string) {\n    template.Parse(tmpl).Execute(os.Stdout, nil)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 316,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Event Dispatch",
      "description": "Dispatching events with user-controlled data.",
      "code": "function dispatchEvent(eventName: string, data: any): void {\n    window.dispatchEvent(new CustomEvent(eventName, { detail: data }));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 317,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Function Pointer",
      "description": "Using function pointers with unvalidated input.",
      "code": "#include <functional>\nvoid call(void (*func)()) {\n    func();\n}",
      "references": [
        "CWE-822: https://cwe.mitre.org/data/definitions/822.html"
      ]
    },
    {
      "id": 318,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Role Creation",
      "description": "Creating roles with user-controlled privileges.",
      "code": "CREATE ROLE @role_name WITH LOGIN PASSWORD 'pass';",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 319,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Package Installation",
      "description": "Installing packages dynamically with user input.",
      "code": "import pip\ndef install_package(name):\n    pip.main(['install', name])",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 320,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Script Injection",
      "description": "Injecting scripts dynamically with user input.",
      "code": "function injectScript(src) {\n    const script = document.createElement('script');\n    script.src = src;\n    document.head.appendChild(script);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 321,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Database Selection",
      "description": "Selecting databases dynamically with user input.",
      "code": "<?php\nmysqli_select_db($conn, $_GET['db']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 322,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Resource Loading",
      "description": "Loading resources dynamically with untrusted input.",
      "code": "public class ResourceLoader {\n    public InputStream load(String path) throws Exception {\n        return getClass().getResourceAsStream(path);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 323,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Job Scheduling",
      "description": "Scheduling jobs with unvalidated input.",
      "code": "require 'sidekiq'\nSidekiq::Cron::Job.create(name: params[:name], cron: params[:cron], class: params[:class])",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 324,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Reflection",
      "description": "Using reflection with untrusted input.",
      "code": "package main\nimport \"reflect\"\nfunc callMethod(obj interface{}, name string) {\n    reflect.ValueOf(obj).MethodByName(name).Call([]reflect.Value{})\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 325,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Attribute Injection",
      "description": "Injecting HTML attributes dynamically with user input.",
      "code": "function setAttribute(element: HTMLElement, attr: string, value: string): void {\n    element.setAttribute(attr, value);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 326,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Object Creation",
      "description": "Creating objects dynamically without type safety.",
      "code": "#include <memory>\nvoid create(void* data) {\n    std::shared_ptr<void> ptr(data);\n}",
      "references": [
        "CWE-704: https://cwe.mitre.org/data/definitions/704.html"
      ]
    },
    {
      "id": 327,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Sequence Creation",
      "description": "Creating sequences with user-controlled names.",
      "code": "CREATE SEQUENCE @sequence_name;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 328,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Property Injection",
      "description": "Injecting properties dynamically with untrusted input.",
      "code": "def inject_property(obj, name, value):\n    obj.__dict__[name] = value",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 329,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Event Listener",
      "description": "Adding event listeners dynamically with user input.",
      "code": "function addListener(element, event, handler) {\n    element.addEventListener(event, () => eval(handler));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 330,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Object Instantiation",
      "description": "Instantiating objects dynamically with user input.",
      "code": "<?php\n$class = $_GET['class'];\nnew $class($_GET['arg']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 331,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Method Invocation",
      "description": "Invoking methods dynamically with untrusted input.",
      "code": "import java.lang.reflect.*;\npublic class Invoker {\n    public void invoke(Object obj, String method) throws Exception {\n        obj.getClass().getMethod(method).invoke(obj);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 332,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Class Definition",
      "description": "Defining classes dynamically with user input.",
      "code": "def define_class(name)\n  Class.new { define_method(:run) { puts name } }\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 333,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Plugin Loading",
      "description": "Loading plugins dynamically with untrusted input.",
      "code": "package main\nimport \"plugin\"\nfunc loadPlugin(path string) {\n    plugin.Open(path)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 334,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Module Resolution",
      "description": "Resolving modules dynamically with user input.",
      "code": "function resolveModule(path: string): any {\n    return require(path);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 335,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Memory Reallocation",
      "description": "Reallocating memory without validation.",
      "code": "#include <cstdlib>\nvoid reallocate(void* ptr, size_t size) {\n    realloc(ptr, size);\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 336,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Partition Creation",
      "description": "Creating partitions with user-controlled names.",
      "code": "ALTER TABLE users PARTITION BY RANGE (@partition_name);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 337,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Code Compilation",
      "description": "Compiling code dynamically with untrusted input.",
      "code": "def compile_code(code):\n    return compile(code, '<string>', 'exec')",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 338,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Style Injection",
      "description": "Injecting styles dynamically with user input.",
      "code": "function injectStyle(css) {\n    const style = document.createElement('style');\n    style.textContent = css;\n    document.head.appendChild(style);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 339,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Error Reporting",
      "description": "Setting error reporting level with user input.",
      "code": "<?php\nerror_reporting($_GET['level']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 340,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Logging Configuration",
      "description": "Configuring logging dynamically with untrusted input.",
      "code": "import java.util.logging.*;\npublic class LoggerConfig {\n    public void setLevel(String level) {\n        Logger.getLogger('').setLevel(Level.parse(level));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 341,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Resource Access",
      "description": "Accessing resources dynamically with untrusted input.",
      "code": "def access_resource(path)\n  File.read(path)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 342,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Handler Registration",
      "description": "Registering HTTP handlers dynamically with user input.",
      "code": "package main\nimport \"net/http\"\nfunc register(path string) {\n    http.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {})\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 343,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic HTML Injection",
      "description": "Injecting HTML dynamically with untrusted input.",
      "code": "function injectHTML(html: string): void {\n    document.body.innerHTML = html;\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 344,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Buffer Access",
      "description": "Accessing buffers dynamically without bounds checking.",
      "code": "#include <vector>\nvoid access_buffer(std::vector<int>& vec, int index) {\n    vec[index] = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 345,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Function Creation",
      "description": "Creating functions with user-controlled logic.",
      "code": "CREATE FUNCTION @func_name() RETURNS INT AS BEGIN RETURN @input; END;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 346,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Resource Import",
      "description": "Importing resources dynamically with untrusted input.",
      "code": "def import_resource(path):\n    with open(path, 'r') as f:\n        return f.read()",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 347,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Worker Creation",
      "description": "Creating web workers dynamically with untrusted input.",
      "code": "function createWorker(script) {\n    return new Worker(script);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 348,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic File Inclusion",
      "description": "Including files dynamically with untrusted input.",
      "code": "<?php\ninclude $_GET['file'];\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-98: https://cwe.mitre.org/data/definitions/98.html"
      ]
    },
    {
      "id": 349,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Class Path",
      "description": "Modifying classpath dynamically with untrusted input.",
      "code": "public class ClassPath {\n    public void addPath(String path) throws Exception {\n        System.setProperty('java.class.path', path);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 350,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic File Access",
      "description": "Accessing files dynamically with untrusted input.",
      "code": "def read_file(path)\n  File.read(path)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    }
    {
      "id": 351,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Signal Registration",
      "description": "Registering signal handlers with unvalidated callbacks.",
      "code": "import signal\ndef register_signal(sig, callback):\n    signal.signal(sig, callback)",
      "references": [
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 352,
      "language": "JavaScript",
      "vulnerability": "Insecure WebSocket Origin",
      "description": "Accepting WebSocket connections without origin validation.",
      "code": "const ws = new WebSocket(userInput);\nws.onopen = () => ws.send('data');",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-346: https://cwe.mitre.org/data/definitions/346.html"
      ]
    },
    {
      "id": 353,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Session Storage",
      "description": "Storing sessions in user-controlled storage paths.",
      "code": "<?php\nsession_save_path($_GET['path']);\nsession_start();\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 354,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Trust Manager",
      "description": "Using custom trust manager without certificate validation.",
      "code": "import javax.net.ssl.*;\npublic class TrustAll implements X509TrustManager {\n    public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n    public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n    public X509Certificate[] getAcceptedIssuers() { return null; }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-295: https://cwe.mitre.org/data/definitions/295.html"
      ]
    },
    {
      "id": 355,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Gem Loading",
      "description": "Loading gems dynamically based on user input.",
      "code": "def load_gem(name)\n  require name\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 356,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Middleware",
      "description": "Applying middleware dynamically with untrusted handlers.",
      "code": "package main\nimport \"net/http\"\nfunc applyMiddleware(handler http.HandlerFunc, middleware string) {\n    middlewareFunc := reflect.ValueOf(middleware).Call([]reflect.Value{})[0].Interface().(func(http.HandlerFunc) http.HandlerFunc)\n    http.HandleFunc(\"/\", middlewareFunc(handler))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-470: https://cwe.mitre.org/data/definitions/470.html"
      ]
    },
    {
      "id": 357,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic JSONP Callback",
      "description": "Using user-controlled JSONP callbacks.",
      "code": "function fetchData(callback: string): void {\n    const script = document.createElement('script');\n    script.src = `https://api.example.com/data?callback=${callback}`;\n    document.head.appendChild(script);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 358,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Signal Handler",
      "description": "Registering signal handlers without validation.",
      "code": "#include <signal.h>\nvoid register_handler(void (*handler)(int)) {\n    signal(SIGINT, handler);\n}",
      "references": [
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 359,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Schema Creation",
      "description": "Creating schemas with user-controlled names.",
      "code": "CREATE SCHEMA @schema_name;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 360,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Thread Creation",
      "description": "Creating threads with unvalidated target functions.",
      "code": "import threading\ndef create_thread(target):\n    threading.Thread(target=target).start()",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 361,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Canvas Rendering",
      "description": "Rendering canvas content with untrusted data.",
      "code": "function renderCanvas(data) {\n    const ctx = document.getElementById('canvas').getContext('2d');\n    ctx.fillText(data, 10, 10);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 362,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Cookie Setting",
      "description": "Setting cookies with user-controlled attributes.",
      "code": "<?php\nsetcookie($_GET['name'], $_GET['value'], $_GET['expire']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 363,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Policy Setting",
      "description": "Setting security policies dynamically with untrusted input.",
      "code": "import java.security.*;\npublic class PolicySetter {\n    public void setPolicy(String policy) throws Exception {\n        Policy.setPolicy((Policy) Class.forName(policy).getDeclaredConstructor().newInstance());\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 364,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Cache Storage",
      "description": "Storing cache data in user-controlled paths.",
      "code": "require 'redis'\ndef cache_data(key, value)\n  Redis.new.set(params[:path] + key, value)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 365,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Log Configuration",
      "description": "Configuring logging dynamically with untrusted input.",
      "code": "package main\nimport \"log\"\nfunc setLogOutput(path string) {\n    f, _ := os.OpenFile(path, os.O_APPEND, 0644)\n    log.SetOutput(f)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 366,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Storage Access",
      "description": "Accessing local storage with user-controlled keys.",
      "code": "function getStorage(key: string): string | null {\n    return localStorage.getItem(key);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 367,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Exception Handling",
      "description": "Catching exceptions without validating types.",
      "code": "#include <exception>\nvoid handle() {\n    try { throw 42; } catch (...) { std::cout << \"Caught\"; }\n}",
      "references": [
        "CWE-703: https://cwe.mitre.org/data/definitions/703.html"
      ]
    },
    {
      "id": 368,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic User Creation",
      "description": "Creating users with user-controlled privileges.",
      "code": "CREATE USER @user_name WITH PASSWORD 'pass' @privileges;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 369,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Context Manager",
      "description": "Using context managers with untrusted input.",
      "code": "from contextlib import contextmanager\ndef create_context(name):\n    return contextmanager(lambda: globals()[name]())",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 370,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Meta Tag Injection",
      "description": "Injecting meta tags dynamically with user input.",
      "code": "function injectMeta(content) {\n    const meta = document.createElement('meta');\n    meta.content = content;\n    document.head.appendChild(meta);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 371,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Timezone Setting",
      "description": "Setting timezone dynamically with user input.",
      "code": "<?php\ndate_default_timezone_set($_GET['timezone']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 372,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Socket Creation",
      "description": "Creating sockets with unvalidated hosts.",
      "code": "import java.net.*;\npublic class SocketCreator {\n    public Socket create(String host) throws Exception {\n        return new Socket(host, 80);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 373,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Queue Creation",
      "description": "Creating message queues with user-controlled names.",
      "code": "require 'bunny'\ndef create_queue(name)\n  Bunny.new.create_channel.queue(name)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 374,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Metric Registration",
      "description": "Registering metrics with user-controlled names.",
      "code": "package main\nimport \"github.com/prometheus/client_golang/prometheus\"\nfunc registerMetric(name string) {\n    prometheus.NewCounter(prometheus.CounterOpts{Name: name})\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 375,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Cookie Access",
      "description": "Accessing cookies with user-controlled names.",
      "code": "function getCookie(name: string): string | null {\n    return document.cookie.split(';').find(c => c.trim().startsWith(name))?.split('=')[1] || null;\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 376,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Resource Allocation",
      "description": "Allocating resources dynamically without limits.",
      "code": "#include <vector>\nvoid allocate(size_t size) {\n    std::vector<char> vec(size);\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 377,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Privilege Grant",
      "description": "Granting privileges with user-controlled scope.",
      "code": "GRANT @privilege ON @table TO @user;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 378,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Event Loop",
      "description": "Creating event loops with untrusted tasks.",
      "code": "import asyncio\ndef run_task(task):\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(task())",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 379,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Audio Processing",
      "description": "Processing audio with untrusted data.",
      "code": "function processAudio(data) {\n    const ctx = new AudioContext();\n    ctx.decodeAudioData(data);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 380,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Resource Limit",
      "description": "Setting resource limits with user input.",
      "code": "<?php\nset_time_limit($_GET['limit']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 381,
      "language": "Java",
      "vulnerability": "Insecure Dynamic JMX Registration",
      "description": "Registering JMX beans with untrusted input.",
      "code": "import javax.management.*;\npublic class JMXRegistrar {\n    public void register(String name, Object bean) throws Exception {\n        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n        mbs.registerMBean(bean, new ObjectName(name));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 382,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Database Connection",
      "description": "Establishing database connections with user-controlled parameters.",
      "code": "require 'active_record'\ndef connect(db)\n  ActiveRecord::Base.establish_connection(db)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 383,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Rate Limiter",
      "description": "Configuring rate limiters with user-controlled values.",
      "code": "package main\nimport \"golang.org/x/time/rate\"\nfunc setLimiter(limit int) {\n    rate.NewLimiter(rate.Limit(limit), limit)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-770: https://cwe.mitre.org/data/definitions/770.html"
      ]
    },
    {
      "id": 384,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Form Submission",
      "description": "Submitting forms with user-controlled actions.",
      "code": "function submitForm(action: string): void {\n    const form = document.createElement('form');\n    form.action = action;\n    form.submit();\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 385,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Thread Pool",
      "description": "Creating thread pools with unbounded sizes.",
      "code": "#include <thread>\nvoid create_pool(int size) {\n    std::vector<std::thread> pool(size);\n}",
      "references": [
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 386,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Audit Log",
      "description": "Configuring audit logs with user-controlled settings.",
      "code": "ALTER SYSTEM SET audit_trail = @setting;",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 387,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Decorator",
      "description": "Applying decorators dynamically with untrusted input.",
      "code": "def apply_decorator(func, decorator):\n    return globals()[decorator](func)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 388,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Fetch Request",
      "description": "Making fetch requests with user-controlled URLs.",
      "code": "function fetchData(url) {\n    fetch(url).then(res => res.json());\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 389,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic File Deletion",
      "description": "Deleting files based on user input.",
      "code": "<?php\nunlink($_GET['file']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 390,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Executor Service",
      "description": "Creating executor services with unbounded queues.",
      "code": "import java.util.concurrent.*;\npublic class ExecutorCreator {\n    public ExecutorService create() {\n        return Executors.newFixedThreadPool(Integer.MAX_VALUE);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 391,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic HTTP Method",
      "description": "Executing HTTP methods based on user input.",
      "code": "require 'net/http'\ndef send_request(method)\n  Net::HTTP.const_get(method.capitalize).new('/').request\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 392,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Timeout Setting",
      "description": "Setting timeouts dynamically with user-controlled values.",
      "code": "package main\nimport \"time\"\nfunc setTimeout(d string) time.Duration {\n    duration, _ := time.ParseDuration(d)\n    return duration\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 393,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Animation Frame",
      "description": "Using requestAnimationFrame with untrusted callbacks.",
      "code": "function animate(callback: string): void {\n    requestAnimationFrame(() => eval(callback));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 394,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Mutex Creation",
      "description": "Creating mutexes without initialization checks.",
      "code": "#include <mutex>\nvoid create_mutex() {\n    std::mutex mtx;\n    mtx.lock();\n}",
      "references": [
        "CWE-667: https://cwe.mitre.org/data/definitions/667.html"
      ]
    },
    {
      "id": 395,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Backup Configuration",
      "description": "Configuring backups with user-controlled settings.",
      "code": "BACKUP DATABASE @db TO DISK = @path;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 396,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Process Spawning",
      "description": "Spawning processes with untrusted commands.",
      "code": "import os\ndef spawn_process(cmd):\n    os.system(cmd)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-78: https://cwe.mitre.org/data/definitions/78.html"
      ]
    },
    {
      "id": 397,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Beacon API",
      "description": "Using navigator.sendBeacon with untrusted URLs.",
      "code": "function sendBeacon(url) {\n    navigator.sendBeacon(url, 'data');\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 398,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Output Buffering",
      "description": "Configuring output buffering with user-controlled settings.",
      "code": "<?php\nob_start($_GET['handler']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 399,
      "language": "Java",
      "vulnerability": "Insecure Dynamic URL Connection",
      "description": "Opening URL connections with untrusted URLs.",
      "code": "import java.net.*;\npublic class URLConnector {\n    public void connect(String url) throws Exception {\n        new URL(url).openConnection().connect();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 400,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Template Engine",
      "description": "Using template engines with untrusted templates.",
      "code": "require 'erb'\ndef render_template(tmpl)\n  ERB.new(tmpl).result\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 401,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Error Handling",
      "description": "Handling errors with user-controlled logic.",
      "code": "package main\nimport \"errors\"\nfunc handleError(err string) error {\n    return errors.New(err)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 402,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Timeout",
      "description": "Setting timeouts with user-controlled values.",
      "code": "function setTimeoutCallback(callback: string, delay: number): void {\n    setTimeout(() => eval(callback), delay);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 403,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Iterator Access",
      "description": "Accessing iterators without bounds checking.",
      "code": "#include <vector>\nvoid access(std::vector<int>& vec, int pos) {\n    auto it = vec.begin() + pos;\n    *it = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 404,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Statistics Collection",
      "description": "Collecting statistics with user-controlled parameters.",
      "code": "ANALYZE @table_name;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 405,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Logging Handler",
      "description": "Configuring logging handlers with untrusted input.",
      "code": "import logging\ndef set_handler(handler):\n    logging.getLogger().addHandler(handler())",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 406,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic History Manipulation",
      "description": "Manipulating browser history with untrusted input.",
      "code": "function updateHistory(url) {\n    history.pushState({}, '', url);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 407,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Charset Setting",
      "description": "Setting charset with user-controlled values.",
      "code": "<?php\nheader('Content-Type: text/html; charset=' . $_GET['charset']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 408,
      "language": "Java",
      "vulnerability": "Insecure Dynamic File Handler",
      "description": "Handling files with untrusted paths.",
      "code": "import java.io.*;\npublic class FileHandler {\n    public void read(String path) throws Exception {\n        new FileInputStream(path).read();\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 409,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Worker Configuration",
      "description": "Configuring workers with user-controlled settings.",
      "code": "require 'sidekiq'\ndef configure_worker(options)\n  Sidekiq.configure_server { |config| config.redis = options }\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 410,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Context Propagation",
      "description": "Propagating contexts with untrusted values.",
      "code": "package main\nimport \"context\"\nfunc propagate(ctx context.Context, key, value string) context.Context {\n    return context.WithValue(ctx, key, value)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 411,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Location Assignment",
      "description": "Assigning window.location with untrusted input.",
      "code": "function redirect(url: string): void {\n    window.location.assign(url);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 412,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Condition Variable",
      "description": "Using condition variables without proper initialization.",
      "code": "#include <condition_variable>\nvoid wait() {\n    std::condition_variable cv;\n    std::mutex mtx;\n    cv.wait(mtx);\n}",
      "references": [
        "CWE-667: https://cwe.mitre.org/data/definitions/667.html"
      ]
    },
    {
      "id": 413,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Transaction Isolation",
      "description": "Setting transaction isolation levels with user input.",
      "code": "SET TRANSACTION ISOLATION LEVEL @level;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 414,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Resource Fork",
      "description": "Accessing resource forks with untrusted paths.",
      "code": "import resource\ndef access_fork(path):\n    resource.open(path, 'r')\n    return resource.getresource(path)",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 415,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Service Worker Cache",
      "description": "Caching resources with untrusted URLs in service workers.",
      "code": "self.addEventListener('install', event => {\n    event.waitUntil(caches.open('cache').then(cache => cache.add(userInput)));\n});",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 416,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Memory Limit",
      "description": "Setting memory limits with user input.",
      "code": "<?php\nini_set('memory_limit', $_GET['limit']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 417,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Class Loader",
      "description": "Using custom class loaders with untrusted paths.",
      "code": "import java.net.*;\npublic class CustomLoader extends URLClassLoader {\n    public CustomLoader(String path) throws Exception {\n        super(new URL[]{new URL(path)});\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 418,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Email Sending",
      "description": "Sending emails with user-controlled headers.",
      "code": "require 'mail'\ndef send_email(headers)\n  Mail.deliver do\n    headers headers\n    to 'user@example.com'\n    from 'sender@example.com'\n    subject 'Test'\n    body 'Content'\n  end\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-113: https://cwe.mitre.org/data/definitions/113.html"
      ]
    },
    {
      "id": 419,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Cache Configuration",
      "description": "Configuring caches with user-controlled sizes.",
      "code": "package main\nimport \"github.com/patrickmn/go-cache\"\nfunc setCache(size string) {\n    cache.New(time.Duration(size))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 420,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic WebGL Shader",
      "description": "Using WebGL shaders with untrusted code.",
      "code": "function createShader(gl: WebGLRenderingContext, code: string): void {\n    const shader = gl.createShader(gl.VERTEX_SHADER)!;\n    gl.shaderSource(shader, code);\n    gl.compileShader(shader);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 421,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Shared Memory",
      "description": "Using shared memory without access controls.",
      "code": "#include <sys/shm.h>\nvoid create_shm(int size) {\n    shmget(IPC_PRIVATE, size, IPC_CREAT | 0666);\n}",
      "references": [
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 422,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Replication Configuration",
      "description": "Configuring replication with user-controlled settings.",
      "code": "CHANGE MASTER TO MASTER_HOST=@host, MASTER_USER=@user;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 423,
      "language": "Python",
      "vulnerability": "Insecure Dynamic File Descriptor",
      "description": "Using file descriptors with untrusted input.",
      "code": "import os\ndef open_fd(fd):\n    return os.fdopen(fd, 'r')",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 424,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Push Subscription",
      "description": "Subscribing to push notifications with untrusted endpoints.",
      "code": "function subscribePush(endpoint) {\n    navigator.serviceWorker.ready.then(reg => reg.pushManager.subscribe({userVisibleOnly: true, applicationServerKey: endpoint}));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 425,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Locale Setting",
      "description": "Setting locale with user-controlled values.",
      "code": "<?php\nsetlocale(LC_ALL, $_GET['locale']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 426,
      "language": "Java",
      "vulnerability": "Insecure Dynamic RMI Binding",
      "description": "Binding RMI objects with untrusted names.",
      "code": "import java.rmi.*;\npublic class RMIBinder {\n    public void bind(String name, Remote obj) throws Exception {\n        Naming.bind(name, obj);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 427,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Asset Compilation",
      "description": "Compiling assets with user-controlled paths.",
      "code": "require 'sprockets'\ndef compile_asset(path)\n  Sprockets::Environment.new.append_path(path)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 428,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Tracing",
      "description": "Enabling tracing with user-controlled settings.",
      "code": "package main\nimport \"runtime/trace\"\nfunc startTrace(path string) {\n    f, _ := os.Create(path)\n    trace.Start(f)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 429,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Speech Synthesis",
      "description": "Using speech synthesis with untrusted text.",
      "code": "function speak(text: string): void {\n    const utterance = new SpeechSynthesisUtterance(text);\n    speechSynthesis.speak(utterance);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 430,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Semaphore Creation",
      "description": "Creating semaphores without initialization checks.",
      "code": "#include <semaphore.h>\nvoid create_sem() {\n    sem_t sem;\n    sem_post(&sem);\n}",
      "references": [
        "CWE-667: https://cwe.mitre.org/data/definitions/667.html"
      ]
    },
    {
      "id": 431,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Collation Setting",
      "description": "Setting collation with user-controlled values.",
      "code": "ALTER TABLE users ALTER COLUMN name SET DATA TYPE VARCHAR(50) COLLATE @collation;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 432,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Traceback Handling",
      "description": "Handling tracebacks with untrusted formatting.",
      "code": "import traceback\ndef format_traceback(fmt):\n    return traceback.format_exc(fmt)",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 433,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Vibration API",
      "description": "Using Vibration API with untrusted patterns.",
      "code": "function vibrate(pattern) {\n    navigator.vibrate(pattern);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 434,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Upload Path",
      "description": "Setting upload paths with user input.",
      "code": "<?php\nmove_uploaded_file($_FILES['file']['tmp_name'], $_GET['path']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 435,
      "language": "Java",
      "vulnerability": "Insecure Dynamic LDAP Query",
      "description": "Executing LDAP queries with untrusted input.",
      "code": "import javax.naming.directory.*;\npublic class LDAPQuery {\n    public void query(String filter) throws Exception {\n        DirContext ctx = new InitialDirContext();\n        ctx.search(\"\", filter, null);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-90: https://cwe.mitre.org/data/definitions/90.html"
      ]
    },
    {
      "id": 436,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic OAuth Configuration",
      "description": "Configuring OAuth with user-controlled parameters.",
      "code": "require 'oauth2'\ndef configure_oauth(params)\n  OAuth2::Client.new(params[:id], params[:secret], site: params[:site])\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 437,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Pprof Exposure",
      "description": "Exposing pprof endpoints without access controls.",
      "code": "package main\nimport \"net/http/pprof\"\nfunc exposePprof() {\n    http.HandleFunc(\"/debug/pprof/\", pprof.Index)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 438,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Device Orientation",
      "description": "Handling device orientation events with untrusted data.",
      "code": "function handleOrientation(event: DeviceOrientationEvent): void {\n    console.log(event.alpha, event.beta, event.gamma);\n}\nwindow.addEventListener('deviceorientation', handleOrientation);",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 439,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Weak Pointer",
      "description": "Using weak pointers without validation.",
      "code": "#include <memory>\nvoid access(std::weak_ptr<int> wp) {\n    if (auto sp = wp.lock()) { *sp = 42; }\n}",
      "references": [
        "CWE-824: https://cwe.mitre.org/data/definitions/824.html"
      ]
    },
    {
      "id": 440,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Compression Setting",
      "description": "Configuring compression with user-controlled settings.",
      "code": "SET compression = @method;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 441,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Metaclass",
      "description": "Using metaclasses with untrusted input.",
      "code": "def create_metaclass(name):\n    return type(name, (type,), {})",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 442,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Gamepad API",
      "description": "Using Gamepad API with untrusted input.",
      "code": "function handleGamepad() {\n    const gamepads = navigator.getGamepads();\n    console.log(gamepads[0].buttons);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 443,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Stream Wrapper",
      "description": "Registering stream wrappers with user input.",
      "code": "<?php\nstream_wrapper_register($_GET['protocol'], $_GET['class']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 444,
      "language": "Java",
      "vulnerability": "Insecure Dynamic JNDI Lookup",
      "description": "Performing JNDI lookups with untrusted input.",
      "code": "import javax.naming.*;\npublic class JNDILookup {\n    public Object lookup(String name) throws Exception {\n        return new InitialContext().lookup(name);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-91: https://cwe.mitre.org/data/definitions/91.html"
      ]
    },
    {
      "id": 445,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic SMTP Configuration",
      "description": "Configuring SMTP with user-controlled settings.",
      "code": "require 'mail'\ndef configure_smtp(settings)\n  Mail.defaults { delivery_method :smtp, settings }\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 446,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Health Check",
      "description": "Exposing health check endpoints without access controls.",
      "code": "package main\nimport \"net/http\"\nfunc healthCheck(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"OK\"))\n}\nfunc init() {\n    http.HandleFunc(\"/health\", healthCheck)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 447,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Battery Status",
      "description": "Accessing battery status without validation.",
      "code": "function getBattery(): void {\n    navigator.getBattery().then(battery => console.log(battery.level));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 448,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Memory Alignment",
      "description": "Aligning memory without validation.",
      "code": "#include <memory>\nvoid align_memory(size_t alignment) {\n    std::align(alignment, sizeof(int), ptr, space);\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 449,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Connection Parameter",
      "description": "Setting connection parameters with user input.",
      "code": "SET @parameter = @value;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 450,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Generator",
      "description": "Creating generators with untrusted input.",
      "code": "def create_generator(code):\n    return (eval(code) for _ in range(10))",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 451,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic MIDI Access",
      "description": "Accessing MIDI devices without validation.",
      "code": "function accessMIDI() {\n    navigator.requestMIDIAccess().then(midi => console.log(midi.inputs));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 452,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Error Handler",
      "description": "Setting error handlers with user input.",
      "code": "<?php\nset_error_handler($_GET['handler']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-209: https://cwe.mitre.org/data/definitions/209.html"
      ]
    },
    {
      "id": 453,
      "language": "Java",
      "vulnerability": "Insecure Dynamic CORBA Invocation",
      "description": "Invoking CORBA methods with untrusted input.",
      "code": "import org.omg.CORBA.*;\npublic class CORBAInvoker {\n    public void invoke(String method, ORB orb) throws Exception {\n        orb.string_to_object(method).invoke(null);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 454,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Memcache Configuration",
      "description": "Configuring memcache with user-controlled settings.",
      "code": "require 'dalli'\ndef configure_cache(options)\n  Dalli::Client.new(options[:host])\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 455,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Expvar Exposure",
      "description": "Exposing expvar endpoints without access controls.",
      "code": "package main\nimport \"expvar\"\nfunc exposeExpvar() {\n    expvar.Publish(\"vars\", expvar.NewInt(\"counter\"))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 456,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Sensor Access",
      "description": "Accessing sensor data without validation.",
      "code": "function accessSensor(): void {\n    const sensor = new Accelerometer();\n    sensor.start();\n    sensor.onreading = () => console.log(sensor.x);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 457,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Atomic Access",
      "description": "Accessing atomic variables without proper synchronization.",
      "code": "#include <atomic>\nvoid access(std::atomic<int>& val) {\n    val = 42;\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 458,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Encryption Setting",
      "description": "Configuring encryption with user-controlled settings.",
      "code": "SET encryption = @method;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 459,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Weak Reference",
      "description": "Creating weak references with untrusted objects.",
      "code": "import weakref\ndef create_weakref(obj):\n    return weakref.ref(obj)",
      "references": [
        "OWASP: https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "CWE-672: https://cwe.mitre.org/data/definitions/672.html"
      ]
    },
    {
      "id": 460,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Presentation Request",
      "description": "Initiating presentation requests with untrusted URLs.",
      "code": "function startPresentation(url) {\n    navigator.presentation.requestSession(url);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-601: https://cwe.mitre.org/data/definitions/601.html"
      ]
    },
    {
      "id": 461,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Filter Registration",
      "description": "Registering filters with user input.",
      "code": "<?php\nstream_filter_register($_GET['filter'], $_GET['class']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 462,
      "language": "Java",
      "vulnerability": "Insecure Dynamic SAX Parsing",
      "description": "Parsing XML with SAX without validation.",
      "code": "import javax.xml.parsers.*;\npublic class SAXParser {\n    public void parse(String xml) throws Exception {\n        SAXParserFactory.newInstance().newSAXParser().parse(xml, new DefaultHandler());\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 463,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic GraphQL Query",
      "description": "Executing GraphQL queries with user-controlled input.",
      "code": "require 'graphql'\ndef execute_query(query)\n  Schema.execute(query)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 464,
      "language": "Go",
      "vulnerability": "Insecure Dynamic File Server",
      "description": "Serving files with user-controlled paths.",
      "code": "package main\nimport \"net/http\"\nfunc serveFile(path string) {\n    http.FileServer(http.Dir(path))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 465,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Proximity Sensor",
      "description": "Accessing proximity sensor data without validation.",
      "code": "function accessProximity(): void {\n    const sensor = new ProximitySensor();\n    sensor.start();\n    sensor.onreading = () => console.log(sensor.near);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 466,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Reference Counting",
      "description": "Manipulating reference counts without validation.",
      "code": "#include <memory>\nvoid modify_ref(std::shared_ptr<int> sp) {\n    sp.use_count();\n    *sp = 42;\n}",
      "references": [
        "CWE-672: https://cwe.mitre.org/data/definitions/672.html"
      ]
    },
    {
      "id": 467,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Session Configuration",
      "description": "Configuring session parameters with user input.",
      "code": "SET SESSION @parameter = @value;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 468,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Profiler",
      "description": "Enabling profiling with user-controlled settings.",
      "code": "import cProfile\ndef profile_code(code):\n    cProfile.run(code)",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 469,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Credential Manager",
      "description": "Using Credential Manager with untrusted input.",
      "code": "function storeCredentials(cred) {\n    navigator.credentials.store(cred);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 470,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Opcode Cache",
      "description": "Configuring opcode cache with user input.",
      "code": "<?php\nopcache_compile_file($_GET['file']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 471,
      "language": "Java",
      "vulnerability": "Insecure Dynamic DOM Parsing",
      "description": "Parsing DOM with untrusted input.",
      "code": "import javax.xml.parsers.*;\npublic class DOMParser {\n    public void parse(String xml) throws Exception {\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(xml);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 472,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic WebSocket Configuration",
      "description": "Configuring WebSocket with user-controlled settings.",
      "code": "require 'faye/websocket'\ndef configure_ws(url)\n  Faye::WebSocket::Client.new(url)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-346: https://cwe.mitre.org/data/definitions/346.html"
      ]
    },
    {
      "id": 473,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Debug Endpoint",
      "description": "Exposing debug endpoints without access controls.",
      "code": "package main\nimport \"net/http\"\nfunc debug(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Debug info\"))\n}\nfunc init() {\n    http.HandleFunc(\"/debug\", debug)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-200: https://cwe.mitre.org/data/definitions/200.html"
      ]
    },
    {
      "id": 474,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Ambient Light Sensor",
      "description": "Accessing ambient light sensor without validation.",
      "code": "function accessLight(): void {\n    const sensor = new AmbientLightSensor();\n    sensor.start();\n    sensor.onreading = () => console.log(sensor.illuminance);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 475,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Volatile Access",
      "description": "Accessing volatile variables without synchronization.",
      "code": "#include <atomic>\nvoid access(volatile int& val) {\n    val = 42;\n}",
      "references": [
        "CWE-362: https://cwe.mitre.org/data/definitions/362.html"
      ]
    },
    {
      "id": 476,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Logging Configuration",
      "description": "Configuring logging with user-controlled settings.",
      "code": "SET log_destination = @destination;",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 477,
      "language": "Python",
      "vulnerability": "Insecure Dynamic AST Manipulation",
      "description": "Manipulating AST with untrusted input.",
      "code": "import ast\ndef modify_ast(code):\n    return ast.parse(code)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 478,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Payment Request",
      "description": "Initiating payment requests with untrusted details.",
      "code": "function requestPayment(details) {\n    new PaymentRequest([{supportedMethods: 'basic-card'}], details).show();\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 479,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Autoload Path",
      "description": "Setting autoload paths with user input.",
      "code": "<?php\nspl_autoload_register(function($class) { include $_GET['path'] . $class . '.php'; });\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 480,
      "language": "Java",
      "vulnerability": "Insecure Dynamic XPath Evaluation",
      "description": "Evaluating XPath expressions with untrusted input.",
      "code": "import javax.xml.xpath.*;\npublic class XPathEvaluator {\n    public Object evaluate(String expr) throws Exception {\n        return XPathFactory.newInstance().newXPath().evaluate(expr, doc);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-643: https://cwe.mitre.org/data/definitions/643.html"
      ]
    },
    {
      "id": 481,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic LDAP Configuration",
      "description": "Configuring LDAP connections with user-controlled parameters.",
      "code": "require 'net/ldap'\ndef configure_ldap(params)\n  Net::LDAP.new(host: params[:host], port: params[:port])\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 482,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Template Execution",
      "description": "Executing templates with untrusted input.",
      "code": "package main\nimport \"text/template\"\nfunc executeTemplate(data string) {\n    t, _ := template.New(\"t\").Parse(data)\n    t.Execute(os.Stdout, nil)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 483,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Geolocation Access",
      "description": "Accessing geolocation data without validation.",
      "code": "function getLocation(): void {\n    navigator.geolocation.getCurrentPosition(pos => console.log(pos.coords.latitude));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 484,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Function Pointer",
      "description": "Using function pointers without validation.",
      "code": "#include <functional>\nvoid call(void (*func)()) {\n    func();\n}",
      "references": [
        "CWE-822: https://cwe.mitre.org/data/definitions/822.html"
      ]
    },
    {
      "id": 485,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Tablespace Creation",
      "description": "Creating tablespaces with user-controlled paths.",
      "code": "CREATE TABLESPACE @name LOCATION @path;",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 486,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Code Compilation",
      "description": "Compiling code dynamically with untrusted input.",
      "code": "def compile_code(code):\n    return compile(code, '<string>', 'exec')",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 487,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Clipboard Access",
      "description": "Accessing clipboard data without validation.",
      "code": "function readClipboard() {\n    navigator.clipboard.readText().then(text => console.log(text));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 488,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Include Path",
      "description": "Setting include paths with user input.",
      "code": "<?php\nset_include_path($_GET['path']);\ninclude 'file.php';\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 489,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Proxy Creation",
      "description": "Creating proxies with untrusted handlers.",
      "code": "import java.lang.reflect.*;\npublic class ProxyCreator {\n    public Object create(Object handler) {\n        return Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{Runnable.class}, (proxy, method, args) -> null);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 490,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Logger Configuration",
      "description": "Configuring loggers with user-controlled settings.",
      "code": "require 'logger'\ndef configure_logger(path)\n  Logger.new(path)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 491,
      "language": "Go",
      "vulnerability": "Insecure Dynamic File Permission",
      "description": "Setting file permissions with user-controlled values.",
      "code": "package main\nimport \"os\"\nfunc setPerm(path string, perm string) {\n    os.Chmod(path, os.FileMode(perm))\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 492,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Fullscreen Request",
      "description": "Requesting fullscreen with untrusted elements.",
      "code": "function requestFullscreen(element: string): void {\n    document.querySelector(element)?.requestFullscreen();\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 493,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Array Indexing",
      "description": "Indexing arrays without bounds checking.",
      "code": "#include <array>\nvoid access(std::array<int, 10>& arr, int index) {\n    arr[index] = 42;\n}",
      "references": [
        "CWE-119: https://cwe.mitre.org/data/definitions/119.html"
      ]
    },
    {
      "id": 494,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Role Creation",
      "description": "Creating roles with user-controlled privileges.",
      "code": "CREATE ROLE @role_name WITH @privileges;",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 495,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Import Hook",
      "description": "Implementing import hooks with untrusted input.",
      "code": "import importlib\nclass CustomFinder:\n    def find_spec(self, name, path, target=None):\n        return importlib.util.spec_from_loader(name, None)",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 496,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Worker Creation",
      "description": "Creating web workers with untrusted scripts.",
      "code": "function createWorker(url) {\n    new Worker(url);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 497,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Session Handler",
      "description": "Setting session handlers with user input.",
      "code": "<?php\nsession_set_save_handler(new $_GET['handler']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 498,
      "language": "Java",
      "vulnerability": "Insecure Dynamic JNI Invocation",
      "description": "Invoking JNI methods with untrusted input.",
      "code": "public class JNIInvoker {\n    public native void invoke(String method);\n    static {\n        System.loadLibrary(\"native\");\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 499,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Rack Middleware",
      "description": "Applying Rack middleware with untrusted input.",
      "code": "require 'rack'\ndef apply_middleware(app, middleware)\n  Rack::Builder.new { use Object.const_get(middleware); run app }\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 500,
      "language": "Go",
      "vulnerability": "Insecure Dynamic HTTP Header",
      "description": "Setting HTTP headers with user-controlled values.",
      "code": "package main\nimport \"net/http\"\nfunc setHeader(w http.ResponseWriter, name, value string) {\n    w.Header().Set(name, value)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-113: https://cwe.mitre.org/data/definitions/113.html"
      ]
    },
    {
      "id": 501,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Pointer Lock",
      "description": "Requesting pointer lock with untrusted elements.",
      "code": "function lockPointer(element: string): void {\n    document.querySelector(element)?.requestPointerLock();\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 502,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Virtual Function",
      "description": "Calling virtual functions without validation.",
      "code": "#include <functional>\nstruct Base {\n    virtual void call() {}\n};\nvoid invoke(Base* obj) {\n    obj->call();\n}",
      "references": [
        "CWE-822: https://cwe.mitre.org/data/definitions/822.html"
      ]
    },
    {
      "id": 503,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Trigger Creation",
      "description": "Creating triggers with user-controlled logic.",
      "code": "CREATE TRIGGER @name @action ON @table FOR EACH ROW @body;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 504,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Memory Cache",
      "description": "Using memory cache with user-controlled keys.",
      "code": "from cachetools import LRUCache\ndef cache_data(key):\n    cache = LRUCache(maxsize=100)\n    cache[key] = 'data'\n    return cache[key]",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 505,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Shared Array Buffer",
      "description": "Using SharedArrayBuffer with untrusted data.",
      "code": "function shareBuffer(data) {\n    const sab = new SharedArrayBuffer(data.length);\n    const arr = new Uint8Array(sab);\n    arr.set(data);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 506,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Reflection Call",
      "description": "Calling methods dynamically with user input.",
      "code": "<?php\n$reflector = new ReflectionClass($_GET['class']);\n$reflector->getMethod($_GET['method'])->invoke(null);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 507,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Security Manager",
      "description": "Setting security manager with untrusted policy.",
      "code": "public class SecuritySetter {\n    public void set(String policy) {\n        System.setSecurityManager(new SecurityManager() {\n            @Override\n            public void checkPermission(Permission perm) {}\n        });\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 508,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic File Compression",
      "description": "Compressing files with user-controlled paths.",
      "code": "require 'zlib'\ndef compress_file(path)\n  Zlib::GzipWriter.open(path) { |gz| gz.write('data') }\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 509,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Signal Handling",
      "description": "Handling OS signals with untrusted logic.",
      "code": "package main\nimport \"os/signal\"\nfunc handleSignal(sig os.Signal, handler func()) {\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, sig)\n    go handler()\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 510,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Media Capture",
      "description": "Capturing media with untrusted constraints.",
      "code": "function captureMedia(constraints: string): void {\n    navigator.mediaDevices.getUserMedia(JSON.parse(constraints));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 511,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Stack Allocation",
      "description": "Allocating stack memory without bounds checking.",
      "code": "#include <alloca.h>\nvoid allocate(size_t size) {\n    void* ptr = alloca(size);\n    memset(ptr, 0, size);\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 512,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Constraint Creation",
      "description": "Creating constraints with user-controlled names.",
      "code": "ALTER TABLE users ADD CONSTRAINT @constraint_name CHECK (@condition);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 513,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Property Descriptor",
      "description": "Defining property descriptors with untrusted input.",
      "code": "def define_property(obj, name, desc):\n    return type(obj).__setattr__(obj, name, property(**desc))",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 514,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Broadcast Channel",
      "description": "Using BroadcastChannel with untrusted messages.",
      "code": "function broadcast(name, message) {\n    new BroadcastChannel(name).postMessage(message);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 515,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Stream Context",
      "description": "Creating stream contexts with user-controlled options.",
      "code": "<?php\n$context = stream_context_create($_GET['options']);\nfopen('file.txt', 'r', false, $context);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 516,
      "language": "Java",
      "vulnerability": "Insecure Dynamic JMX Invocation",
      "description": "Invoking JMX methods with untrusted input.",
      "code": "import javax.management.*;\npublic class JMXInvoker {\n    public void invoke(String name, String method) throws Exception {\n        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n        mbs.invoke(new ObjectName(name), method, null, null);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 517,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic Tempfile Creation",
      "description": "Creating temporary files with user-controlled paths.",
      "code": "require 'tempfile'\ndef create_tempfile(path)\n  Tempfile.new(path)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-22: https://cwe.mitre.org/data/definitions/22.html"
      ]
    },
    {
      "id": 518,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Mutex Creation",
      "description": "Creating mutexes with untrusted initialization.",
      "code": "package main\nimport \"sync\"\nfunc createMutex() *sync.Mutex {\n    return new(sync.Mutex)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-667: https://cwe.mitre.org/data/definitions/667.html"
      ]
    },
    {
      "id": 519,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Screen Capture",
      "description": "Capturing screen with untrusted constraints.",
      "code": "function captureScreen(constraints: string): void {\n    navigator.mediaDevices.getDisplayMedia(JSON.parse(constraints));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 520,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Lambda Capture",
      "description": "Capturing variables in lambdas without validation.",
      "code": "#include <functional>\nvoid capture(int* ptr) {\n    auto lambda = [ptr]() { *ptr = 42; };\n    lambda();\n}",
      "references": [
        "CWE-822: https://cwe.mitre.org/data/definitions/822.html"
      ]
    },
    {
      "id": 521,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Index Creation",
      "description": "Creating indexes with user-controlled names.",
      "code": "CREATE INDEX @index_name ON @table (@column);",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 522,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Frame Injection",
      "description": "Injecting frames with untrusted input.",
      "code": "import sys\ndef inject_frame(frame):\n    sys._current_frames()[0] = frame",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 523,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Message Channel",
      "description": "Using MessageChannel with untrusted messages.",
      "code": "function sendMessage(message) {\n    const channel = new MessageChannel();\n    channel.port1.postMessage(message);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 524,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic Soap Client",
      "description": "Creating SOAP clients with user-controlled WSDL.",
      "code": "<?php\n$client = new SoapClient($_GET['wsdl']);\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 525,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Thread Group",
      "description": "Creating thread groups with untrusted names.",
      "code": "public class ThreadGroupCreator {\n    public ThreadGroup create(String name) {\n        return new ThreadGroup(name);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 526,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic JSON Parsing",
      "description": "Parsing JSON with untrusted input.",
      "code": "require 'json'\ndef parse_json(data)\n  JSON.parse(data)\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 527,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Wait Group",
      "description": "Using wait groups with untrusted counters.",
      "code": "package main\nimport \"sync\"\nfunc wait(count int) {\n    wg := sync.WaitGroup{}\n    wg.Add(count)\n    wg.Wait()\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 528,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Text Track",
      "description": "Adding text tracks with untrusted sources.",
      "code": "function addTrack(src: string): void {\n    const track = document.createElement('track');\n    track.src = src;\n    document.querySelector('video')?.appendChild(track);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-79: https://cwe.mitre.org/data/definitions/79.html"
      ]
    },
    {
      "id": 529,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Type Casting",
      "description": "Casting types dynamically without validation.",
      "code": "#include <typeinfo>\nvoid cast(void* ptr, const std::type_info& type) {\n    typeid(*ptr) == type;\n}",
      "references": [
        "CWE-704: https://cwe.mitre.org/data/definitions/704.html"
      ]
    },
    {
      "id": 530,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic View Creation",
      "description": "Creating views with user-controlled queries.",
      "code": "CREATE VIEW @view_name AS @query;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 531,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Module Reload",
      "description": "Reloading modules with untrusted names.",
      "code": "import importlib\ndef reload_module(name):\n    importlib.reload(importlib.import_module(name))",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 532,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Intersection Observer",
      "description": "Using IntersectionObserver with untrusted callbacks.",
      "code": "function observe(element, callback) {\n    new IntersectionObserver(entries => eval(callback)).observe(document.querySelector(element));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 533,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic XML Parsing",
      "description": "Parsing XML with user-controlled input.",
      "code": "<?php\n$xml = simplexml_load_string($_GET['xml']);\necho $xml;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-611: https://cwe.mitre.org/data/definitions/611.html"
      ]
    },
    {
      "id": 534,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Resource Bundle",
      "description": "Loading resource bundles with untrusted names.",
      "code": "import java.util.*;\npublic class BundleLoader {\n    public ResourceBundle load(String name) {\n        return ResourceBundle.getBundle(name);\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 535,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic HTTP Client",
      "description": "Configuring HTTP clients with user-controlled settings.",
      "code": "require 'httparty'\ndef configure_client(options)\n  HTTParty.get(options[:url])\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 536,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Channel Creation",
      "description": "Creating channels with untrusted sizes.",
      "code": "package main\nfunc createChannel(size int) chan int {\n    return make(chan int, size)\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 537,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Picture-in-Picture",
      "description": "Entering picture-in-picture with untrusted elements.",
      "code": "function enterPiP(element: string): void {\n    document.querySelector(element)?.requestPictureInPicture();\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 538,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Exception Specification",
      "description": "Using exception specifications without validation.",
      "code": "#include <stdexcept>\nvoid throwException() throw(int) {\n    throw 42;\n}",
      "references": [
        "CWE-703: https://cwe.mitre.org/data/definitions/703.html"
      ]
    },
    {
      "id": 539,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Partition Creation",
      "description": "Creating partitions with user-controlled names.",
      "code": "ALTER TABLE users PARTITION BY RANGE (@column) (PARTITION @partition_name VALUES LESS THAN (@value));",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 540,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Context Var",
      "description": "Using context variables with untrusted keys.",
      "code": "import contextvars\ndef set_context(key, value):\n    var = contextvars.ContextVar(key)\n    var.set(value)",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    },
    {
      "id": 541,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Resize Observer",
      "description": "Using ResizeObserver with untrusted callbacks.",
      "code": "function observeResize(element, callback) {\n    new ResizeObserver(entries => eval(callback)).observe(document.querySelector(element));\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-95: https://cwe.mitre.org/data/definitions/95.html"
      ]
    },
    {
      "id": 542,
      "language": "PHP",
      "vulnerability": "Insecure Dynamic YAML Parsing",
      "description": "Parsing YAML with user-controlled input.",
      "code": "<?php\n$yaml = yaml_parse($_GET['yaml']);\necho $yaml;\n?>",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-94: https://cwe.mitre.org/data/definitions/94.html"
      ]
    },
    {
      "id": 543,
      "language": "Java",
      "vulnerability": "Insecure Dynamic Log Manager",
      "description": "Configuring log managers with untrusted settings.",
      "code": "import java.util.logging.*;\npublic class LogConfigurer {\n    public void configure(String config) {\n        LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(config.getBytes()));\n    }\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "CWE-778: https://cwe.mitre.org/data/definitions/778.html"
      ]
    },
    {
      "id": 544,
      "language": "Ruby",
      "vulnerability": "Insecure Dynamic File Encryption",
      "description": "Encrypting files with user-controlled keys.",
      "code": "require 'openssl'\ndef encrypt_file(path, key)\n  cipher = OpenSSL::Cipher.new('AES-256-CBC')\n  cipher.encrypt\n  cipher.key = key\nend",
      "references": [
        "OWASP: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "CWE-326: https://cwe.mitre.org/data/definitions/326.html"
      ]
    },
    {
      "id": 545,
      "language": "Go",
      "vulnerability": "Insecure Dynamic Pool Creation",
      "description": "Creating sync pools with untrusted sizes.",
      "code": "package main\nimport \"sync\"\nfunc createPool(size int) *sync.Pool {\n    return &sync.Pool{New: func() interface{} { return make([]byte, size) }}\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "CWE-400: https://cwe.mitre.org/data/definitions/400.html"
      ]
    },
    {
      "id": 546,
      "language": "TypeScript",
      "vulnerability": "Insecure Dynamic Source Map",
      "description": "Loading source maps with untrusted URLs.",
      "code": "function loadSourceMap(url: string): void {\n    const script = document.createElement('script');\n    script.src = url;\n    document.head.appendChild(script);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-829: https://cwe.mitre.org/data/definitions/829.html"
      ]
    },
    {
      "id": 547,
      "language": "C++",
      "vulnerability": "Insecure Dynamic Allocator",
      "description": "Using custom allocators without validation.",
      "code": "#include <memory>\nvoid allocate(std::allocator<char>& alloc, size_t size) {\n    alloc.allocate(size);\n}",
      "references": [
        "CWE-789: https://cwe.mitre.org/data/definitions/789.html"
      ]
    },
    {
      "id": 548,
      "language": "SQL",
      "vulnerability": "Insecure Dynamic Sequence Creation",
      "description": "Creating sequences with user-controlled parameters.",
      "code": "CREATE SEQUENCE @sequence_name START WITH @start INCREMENT BY @increment;",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89: https://cwe.mitre.org/data/definitions/89.html"
      ]
    },
    {
      "id": 549,
      "language": "Python",
      "vulnerability": "Insecure Dynamic Signal Dispatch",
      "description": "Dispatching signals with untrusted handlers.",
      "code": "import signal\ndef dispatch_signal(sig, handler):\n    signal.signal(sig, lambda s, f: handler())",
      "references": [
        "OWASP: https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-479: https://cwe.mitre.org/data/definitions/479.html"
      ]
    },
    {
      "id": 550,
      "language": "JavaScript",
      "vulnerability": "Insecure Dynamic Performance Mark",
      "description": "Creating performance marks with untrusted names.",
      "code": "function markPerformance(name) {\n    performance.mark(name);\n}",
      "references": [
        "OWASP: https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "CWE-284: https://cwe.mitre.org/data/definitions/284.html"
      ]
    }
]